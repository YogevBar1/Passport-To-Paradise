[{"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\index.tsx":"1","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\reportWebVitals.ts":"2","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Layout\\Layout.tsx":"3","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Menu\\Menu.tsx":"4","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Header\\Header.tsx":"5","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Routing\\Routing.tsx":"6","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\Register\\Register.tsx":"7","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\AuthMenu\\AuthMenu.tsx":"8","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\Login\\Login.tsx":"9","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\PageNotFound\\PageNotFound.tsx":"10","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\EditVacation\\EditVacation.tsx":"11","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\ReportVacation\\ReportVacation.tsx":"12","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\InsertVacation\\InsertVacation.tsx":"13","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\ListVacation\\ListVacation.tsx":"14","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\HomeArea\\Home\\Home.tsx":"15","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\AuthService.ts":"16","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\VacationsService.ts":"17","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\NotifyService.ts":"18","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Redux\\AuthState.ts":"19","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Models\\RoleModel.ts":"20","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\VacationCard\\VacationCard.tsx":"21","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Redux\\VacationState.ts":"22","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Utils\\AppConfig.ts":"23","C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\FollowService.ts":"24"},{"size":618,"mtime":1694024869992,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1692028421376,"results":"27","hashOfConfig":"26"},{"size":348,"mtime":1696510458216,"results":"28","hashOfConfig":"26"},{"size":204,"mtime":1696510517437,"results":"29","hashOfConfig":"26"},{"size":243,"mtime":1696510440776,"results":"30","hashOfConfig":"26"},{"size":1285,"mtime":1696590618802,"results":"31","hashOfConfig":"26"},{"size":2194,"mtime":1696682423302,"results":"32","hashOfConfig":"26"},{"size":1853,"mtime":1696509888294,"results":"33","hashOfConfig":"26"},{"size":1880,"mtime":1696682402413,"results":"34","hashOfConfig":"26"},{"size":387,"mtime":1696512686754,"results":"35","hashOfConfig":"26"},{"size":7252,"mtime":1696594057782,"results":"36","hashOfConfig":"26"},{"size":2769,"mtime":1696688305137,"results":"37","hashOfConfig":"26"},{"size":6799,"mtime":1696598434603,"results":"38","hashOfConfig":"26"},{"size":14026,"mtime":1696755510696,"results":"39","hashOfConfig":"26"},{"size":1639,"mtime":1696510297463,"results":"40","hashOfConfig":"26"},{"size":1609,"mtime":1696592222282,"results":"41","hashOfConfig":"26"},{"size":3910,"mtime":1696592312252,"results":"42","hashOfConfig":"26"},{"size":839,"mtime":1692028421809,"results":"43","hashOfConfig":"26"},{"size":1860,"mtime":1696592208030,"results":"44","hashOfConfig":"26"},{"size":77,"mtime":1696514440928,"results":"45","hashOfConfig":"26"},{"size":5309,"mtime":1696762159945,"results":"46","hashOfConfig":"26"},{"size":1870,"mtime":1696533340584,"results":"47","hashOfConfig":"26"},{"size":724,"mtime":1695194610285,"results":"48","hashOfConfig":"26"},{"size":1836,"mtime":1696592286742,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ykgqvb",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\index.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\reportWebVitals.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Layout\\Layout.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Menu\\Menu.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Header\\Header.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\Routing\\Routing.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\Register\\Register.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\AuthMenu\\AuthMenu.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\AuthArea\\Login\\Login.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\LayoutArea\\PageNotFound\\PageNotFound.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\EditVacation\\EditVacation.tsx",["124","125"],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\ReportVacation\\ReportVacation.tsx",["126"],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\InsertVacation\\InsertVacation.tsx",["127"],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\ListVacation\\ListVacation.tsx",["128","129"],[],"import React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport UserModel from \"../../../Models/UserModel\";\nimport VacationModel from \"../../../Models/VacationModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport VacationCard from \"../VacationCard/VacationCard\";\nimport \"./ListVacation.css\";\nimport RoleModel from \"../../../Models/RoleModel\";\n\n/**\n * The `ListVacation` component displays a list of vacations, with filtering options for users.\n * Administrators can view all vacations, download vacation data as a CSV file, and add new vacations.\n * Users can filter vacations by followed status, upcoming start dates, and currently active vacations.\n * Users can also view and interact with vacation cards, including following/unfollowing vacations.\n */\nfunction ListVacation(): JSX.Element {\n    const navigate = useNavigate();\n    const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n        []\n    );\n    const [currentPage, setCurrentPage] = useState<number>(1);\n    const vacationsPerPage = 9;\n    const [user, setUser] = useState<UserModel>();\n    const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n    const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n    const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n    const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n\n    const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n        []\n    ); // State to store filtered vacations\n\n    const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n        // Update the frontendVacations state\n        setFrontendVacations((prevVacations) =>\n            prevVacations.map((vacation) =>\n                vacation.vacationId === vacationId\n                    ? { ...vacation, isFollowing: followed }\n                    : vacation\n            )\n        );\n    };\n\n    useEffect(() => {\n        // Check if the user login:\n        const token = authStore.getState().token;\n        // If the user is not logged in, show an error message and navigate to the login page\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        // Get the logged-in user from the application state and set it in the component's state\n        const loggedUser = authStore.getState().user;\n        setUser(loggedUser);\n\n        // Fetch followed vacations for the logged-in user and update component state\n        vacationsService\n            .getFollowedVacations(loggedUser?.userId)\n            .then(backendVacations => {\n                // Sort the fetched vacations by start date\n                backendVacations.sort(\n                    (a, b) =>\n                        new Date(a.vacationStartDate).getTime() -\n                        new Date(b.vacationStartDate).getTime()\n                );\n                // Set both frontend and filtered vacations to the fetched data\n                setFrontendVacations(backendVacations);\n                setFilteredVacations(backendVacations);\n            })\n            .catch((err) => notifyService.error(err));\n    }, [vacationDeleted]);\n\n    // Function to convert data to CSV\n    function convertToCSV(data: VacationModel[]): string {\n        const header = \"Followers,Destination\\n\";\n        // Map each vacation to a CSV row containing followers count and destination\n        const csvData = data.map((item) => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n        return header + csvData;\n    }\n\n    // Handler for changing the current page in pagination\n    const handlePageChange = (newPage: number) => {\n        setCurrentPage(newPage);\n    };\n\n    // Calculate the total number of pages based on the filtered vacations and vacations per page\n    const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n\n    // Calculate the index of the last vacation to display on the current page\n    const indexOfLastVacation = currentPage * vacationsPerPage;\n\n    // Calculate the index of the first vacation to display on the current page\n    const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n    // Function to filter vacations based on the checkbox state\n    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, checked } = e.target;\n\n        // Create new state variables for each checkbox\n        let newShowFollowed = showFollowed;\n        let newShowUpcoming = showUpcoming;\n        let newShowActive = showActive;\n\n        if (name === \"showFollowed\") {\n            newShowFollowed = checked;\n        } else if (name === \"showUpcoming\") {\n            newShowUpcoming = checked;\n        } else if (name === \"showActive\") {\n            newShowActive = checked;\n        }\n\n        // Calculate the filtered vacations based on the new checkbox states\n        // Calculate the current date for filtering\n        const currentDate = new Date();\n        // Filter the vacations based on the new checkbox states\n        const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n            // Determine if the \"Show Followed Vacations\" checkbox is checked\n            const isFollowed = newShowFollowed;\n\n            // Determine if the \"Show Upcoming Vacations\" checkbox is checked\n            const isUpcoming = newShowUpcoming;\n\n            // Determine if the \"Show Active Vacations\" checkbox is checked\n            const isActive = newShowActive;\n\n            // Convert vacation start and end dates to Date objects\n            const vacationStartDate = new Date(vacation.vacationStartDate);\n            const vacationEndDate = new Date(vacation.vacationEndDate);\n\n            // Define the filter conditions based on the combination of checkboxes\n            let meetsFilterConditions = true;\n            if (isFollowed) {\n                meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n            }\n            // Check if \"Show Upcoming Vacations\" is checked and the vacation starts in the future\n            if (isUpcoming) {\n                meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n            }\n            // Check if \"Show Active Vacations\" is checked and the vacation is currently active\n            if (isActive) {\n                meetsFilterConditions =\n                    meetsFilterConditions &&\n                    vacationStartDate <= currentDate &&\n                    vacationEndDate >= currentDate;\n            }\n            // Return true if the vacation meets all filter conditions, otherwise false\n            return meetsFilterConditions;\n        });\n\n        // Update the checkbox states and filtered vacations\n        setShowFollowed(newShowFollowed);\n        setShowUpcoming(newShowUpcoming);\n        setShowActive(newShowActive);\n        setFilteredVacations(filteredVacationsByCheckbox);\n        setCurrentPage(1);\n    };\n\n    const currentVacations = filteredVacations.slice(\n        indexOfFirstVacation,\n        indexOfLastVacation\n    );\n\n    // Function to handle deleting a vacation\n    const handleDeleteVacation = async (vacationId: number) => {\n        try {\n            // Display a confirmation dialog\n            const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n            if (!confirmed) {\n                // The user canceled the deletion\n                return;\n            }\n\n            // Call the deleteVacation function from the vacationsService\n            await vacationsService.deleteVacation(vacationId);\n\n            // Update the frontendVacations state by filtering out the deleted vacation\n            setFrontendVacations((prevVacations) =>\n                prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n            );\n\n            notifyService.success(\"The vacation has been successfully deleted\");\n\n            // Trigger a re-render by updating vacationDeleted\n            setVacationDeleted((prevValue) => !prevValue);\n\n        } catch (error) {\n            console.error(\"Error deleting vacation:\", error);\n        }\n    };\n\n    // Function to handle downloading the CSV\n    function handleDownloadCSV() {\n        // Generate a timestamp for the current date and time\n        const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n\n        // Create a filename with the timestamp\n        const filename = `vacations_${timestamp}.csv`;\n\n        // Convert the filteredVacations data to CSV format\n        const csvData = convertToCSV(filteredVacations);\n\n        // Create a Blob object with the CSV data\n        const blob = new Blob([csvData], { type: \"text/csv\" });\n\n        // Create a temporary URL for the Blob\n        const url = window.URL.createObjectURL(blob);\n\n        // Create an anchor element for the download\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = filename; // Use the filename with the timestamp\n\n        // Trigger a click event to start the download\n        a.click();\n\n        // Clean up by revoking the Blob URL\n        window.URL.revokeObjectURL(url);\n    }\n\n    return (\n        <div className=\"List\">\n            {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n            <br></br>\n            {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n            <div>\n                {user && user.roleId === RoleModel.Admin && (\n                    <button onClick={handleDownloadCSV}>Download CSV file</button>\n                )}\n            </div>\n\n            {user && user.roleId == RoleModel.User &&\n                <div >\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showFollowed\"\n                            checked={showFollowed}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Followed Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showUpcoming\"\n                            checked={showUpcoming}\n                            disabled={showActive}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Upcoming Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showActive\"\n                            checked={showActive}\n                            disabled={showUpcoming}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Active Vacations\n                    </label>\n                </div>\n            }\n            <div className=\"pagination\">\n                {filteredVacations.length > 0 && (\n                    <>\n                        <button\n                            onClick={() => handlePageChange(currentPage - 1)}\n                            disabled={currentPage === 1}\n                        >\n                            Previous\n                        </button>\n                        {Array.from({ length: totalPages }, (_, i) => (\n                            <button\n                                key={i}\n                                onClick={() => handlePageChange(i + 1)}\n                                className={currentPage === i + 1 ? \"active\" : \"\"}\n                            >\n                                {i + 1}\n                            </button>\n                        ))}\n                        <button\n                            onClick={() => handlePageChange(currentPage + 1)}\n                            disabled={currentPage === totalPages}\n                        >\n                            Next\n                        </button>\n                    </>\n                )}\n            </div>\n\n            <h2>Our Vacations</h2>\n            {currentVacations.map((vacation) => (\n                <VacationCard\n                    key={vacation.vacationId}\n                    vacation={vacation}\n                    userId={user.userId}\n                    followersCount={vacation.followersCount}\n                    user={user}\n                    onDelete={handleDeleteVacation}\n                    onUpdateVacations={handleUpdateVacations}\n                />\n\n            ))}\n            <div className=\"pagination\">\n                <button\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                >\n                    Previous\n                </button>\n                {Array.from({ length: totalPages }, (_, i) => (\n                    <button\n                        key={i}\n                        onClick={() => handlePageChange(i + 1)}\n                        className={currentPage === i + 1 ? \"active\" : \"\"}\n                    >\n                        {i + 1}\n                    </button>\n                ))}\n                <button\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                >\n                    Next\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ListVacation;\n\n",[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\HomeArea\\Home\\Home.tsx",["130"],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\AuthService.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\VacationsService.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\NotifyService.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Redux\\AuthState.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Models\\RoleModel.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Components\\VacationArea\\VacationCard\\VacationCard.tsx",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Redux\\VacationState.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Utils\\AppConfig.ts",[],[],"C:\\John Bryce Programing\\Passport To Paradise\\Frontend\\src\\Services\\FollowService.ts",[],[],{"ruleId":"131","severity":1,"message":"132","line":63,"column":79,"nodeType":"133","messageId":"134","endLine":63,"endColumn":80},{"ruleId":"135","severity":1,"message":"136","line":66,"column":8,"nodeType":"137","endLine":66,"endColumn":30,"suggestions":"138"},{"ruleId":"135","severity":1,"message":"136","line":58,"column":8,"nodeType":"137","endLine":58,"endColumn":10,"suggestions":"139"},{"ruleId":"135","severity":1,"message":"136","line":47,"column":8,"nodeType":"137","endLine":47,"endColumn":10,"suggestions":"140"},{"ruleId":"135","severity":1,"message":"136","line":75,"column":8,"nodeType":"137","endLine":75,"endColumn":25,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":237,"column":34,"nodeType":"133","messageId":"144","endLine":237,"endColumn":36},{"ruleId":"145","severity":1,"message":"146","line":8,"column":13,"nodeType":"147","endLine":8,"endColumn":36},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["148"],["149"],["150"],["151"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"154","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [vacationId, setValue, navigate]",{"range":"159","text":"160"},"Update the dependencies array to be: [navigate]",{"range":"161","text":"162"},{"range":"163","text":"162"},"Update the dependencies array to be: [navigate, vacationDeleted]",{"range":"164","text":"165"},[2896,2918],"[vacationId, setValue, navigate]",[2301,2303],"[navigate]",[1873,1875],[3559,3576],"[navigate, vacationDeleted]"]