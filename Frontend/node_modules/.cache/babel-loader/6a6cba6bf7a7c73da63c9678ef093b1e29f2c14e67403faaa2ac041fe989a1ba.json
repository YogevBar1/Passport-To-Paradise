{"ast":null,"code":"import axios from \"axios\";\nimport { authStore } from \"../Redux/AuthState\";\nimport appConfig from \"../Utils/AppConfig\";\n\n// FollowService class encapsulates functions related to following and unfollowing vacations\nclass FollowService {\n  // Function to follow a vacation\n  async followVacation(follow) {\n    try {\n      // Set up headers with authorization token\n      const options = {\n        headers: {\n          \"Authorization\": \"Bearer \" + authStore.getState().token\n        }\n      };\n\n      // Send a POST request to follow a vacation\n      await axios.post(appConfig.followUrl, follow, options);\n    } catch (err) {\n      // Handle errors during the follow process\n      console.error('Error following vacation:', err.message);\n    }\n  }\n\n  // Function to unfollow a vacation\n  async unFollowVacation(follow) {\n    try {\n      // Set up headers with authorization token\n      const options = {\n        headers: {\n          \"Authorization\": \"Bearer \" + authStore.getState().token\n        }\n      };\n\n      // Send a DELETE request to unfollow a vacation\n      await axios.delete(appConfig.unfollowUrl, {\n        data: follow,\n        // Send the FollowModel in the request body\n        headers: options.headers\n      });\n    } catch (err) {\n      // Handle errors during the unfollow process\n      console.error('Error unfollowing vacation:', err.message);\n    }\n  }\n\n  // Function to check if a user is following a vacation\n  async checkIfUserIsFollowing(userId, vacationId) {\n    try {\n      // Set up headers with authorization token\n      const options = {\n        headers: {\n          \"Authorization\": \"Bearer \" + authStore.getState().token\n        }\n      };\n\n      // Send a GET request to check if the user is following the vacation\n      const response = await axios.get(appConfig.isUserFollowUrl + userId + \"/\" + vacationId, options);\n\n      // Extract the data from the response\n      const isFollow = response.data;\n      return isFollow;\n    } catch (err) {\n      // Handle errors during the check process\n      console.error('Error checking if user is following vacation:', err.message);\n      return false; // Return false in case of an error\n    }\n  }\n}\n\n// Create an instance of the FollowService class\nconst followService = new FollowService();\n\n// Export the followService instance\nexport default followService;","map":{"version":3,"names":["axios","authStore","appConfig","FollowService","followVacation","follow","options","headers","getState","token","post","followUrl","err","console","error","message","unFollowVacation","delete","unfollowUrl","data","checkIfUserIsFollowing","userId","vacationId","response","get","isUserFollowUrl","isFollow","followService"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Services/FollowService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport FollowModel from \"../Models/FollowModel\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\n\r\n// FollowService class encapsulates functions related to following and unfollowing vacations\r\nclass FollowService {\r\n    // Function to follow a vacation\r\n    public async followVacation(follow: FollowModel): Promise<void> {\r\n        try {\r\n            // Set up headers with authorization token\r\n            const options = {\r\n                headers: { \"Authorization\": \"Bearer \" + authStore.getState().token }\r\n            }\r\n\r\n            // Send a POST request to follow a vacation\r\n            await axios.post(appConfig.followUrl, follow, options);\r\n\r\n        } catch (err: any) {\r\n            // Handle errors during the follow process\r\n            console.error('Error following vacation:', err.message);\r\n        }\r\n    }\r\n\r\n    // Function to unfollow a vacation\r\n    public async unFollowVacation(follow: FollowModel): Promise<void> {\r\n        try {\r\n            // Set up headers with authorization token\r\n            const options = {\r\n                headers: { \"Authorization\": \"Bearer \" + authStore.getState().token }\r\n            };\r\n\r\n            // Send a DELETE request to unfollow a vacation\r\n            await axios.delete(appConfig.unfollowUrl, {\r\n                data: follow, // Send the FollowModel in the request body\r\n                headers: options.headers,\r\n            });\r\n        } catch (err: any) {\r\n            // Handle errors during the unfollow process\r\n            console.error('Error unfollowing vacation:', err.message);\r\n        }\r\n    }\r\n\r\n    // Function to check if a user is following a vacation\r\n    public async checkIfUserIsFollowing(userId: number, vacationId: number): Promise<boolean> {\r\n        try {\r\n            // Set up headers with authorization token\r\n            const options = {\r\n                headers: { \"Authorization\": \"Bearer \" + authStore.getState().token }\r\n            }\r\n\r\n            // Send a GET request to check if the user is following the vacation\r\n            const response = await axios.get(appConfig.isUserFollowUrl + userId + \"/\" + vacationId, options);\r\n\r\n            // Extract the data from the response\r\n            const isFollow = response.data;\r\n\r\n            return isFollow;\r\n        } catch (err: any) {\r\n            // Handle errors during the check process\r\n            console.error('Error checking if user is following vacation:', err.message);\r\n            return false; // Return false in case of an error\r\n        }\r\n    }\r\n}\r\n\r\n// Create an instance of the FollowService class\r\nconst followService = new FollowService();\r\n\r\n// Export the followService instance\r\nexport default followService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,SAAS,MAAM,oBAAoB;;AAE1C;AACA,MAAMC,aAAa,CAAC;EAChB;EACA,MAAaC,cAAcA,CAACC,MAAmB,EAAiB;IAC5D,IAAI;MACA;MACA,MAAMC,OAAO,GAAG;QACZC,OAAO,EAAE;UAAE,eAAe,EAAE,SAAS,GAAGN,SAAS,CAACO,QAAQ,EAAE,CAACC;QAAM;MACvE,CAAC;;MAED;MACA,MAAMT,KAAK,CAACU,IAAI,CAACR,SAAS,CAACS,SAAS,EAAEN,MAAM,EAAEC,OAAO,CAAC;IAE1D,CAAC,CAAC,OAAOM,GAAQ,EAAE;MACf;MACAC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAACG,OAAO,CAAC;IAC3D;EACJ;;EAEA;EACA,MAAaC,gBAAgBA,CAACX,MAAmB,EAAiB;IAC9D,IAAI;MACA;MACA,MAAMC,OAAO,GAAG;QACZC,OAAO,EAAE;UAAE,eAAe,EAAE,SAAS,GAAGN,SAAS,CAACO,QAAQ,EAAE,CAACC;QAAM;MACvE,CAAC;;MAED;MACA,MAAMT,KAAK,CAACiB,MAAM,CAACf,SAAS,CAACgB,WAAW,EAAE;QACtCC,IAAI,EAAEd,MAAM;QAAE;QACdE,OAAO,EAAED,OAAO,CAACC;MACrB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOK,GAAQ,EAAE;MACf;MACAC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAACG,OAAO,CAAC;IAC7D;EACJ;;EAEA;EACA,MAAaK,sBAAsBA,CAACC,MAAc,EAAEC,UAAkB,EAAoB;IACtF,IAAI;MACA;MACA,MAAMhB,OAAO,GAAG;QACZC,OAAO,EAAE;UAAE,eAAe,EAAE,SAAS,GAAGN,SAAS,CAACO,QAAQ,EAAE,CAACC;QAAM;MACvE,CAAC;;MAED;MACA,MAAMc,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAACtB,SAAS,CAACuB,eAAe,GAAGJ,MAAM,GAAG,GAAG,GAAGC,UAAU,EAAEhB,OAAO,CAAC;;MAEhG;MACA,MAAMoB,QAAQ,GAAGH,QAAQ,CAACJ,IAAI;MAE9B,OAAOO,QAAQ;IACnB,CAAC,CAAC,OAAOd,GAAQ,EAAE;MACf;MACAC,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEF,GAAG,CAACG,OAAO,CAAC;MAC3E,OAAO,KAAK,CAAC,CAAC;IAClB;EACJ;AACJ;;AAEA;AACA,MAAMY,aAAa,GAAG,IAAIxB,aAAa,EAAE;;AAEzC;AACA,eAAewB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}