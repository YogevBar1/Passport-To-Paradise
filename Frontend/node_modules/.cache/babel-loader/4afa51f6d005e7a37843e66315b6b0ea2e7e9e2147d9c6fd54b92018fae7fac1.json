{"ast":null,"code":"import axios from \"axios\";\nimport { authStore } from \"../Redux/AuthState\";\nimport { VacationsActionType, vacationStore } from \"../Redux/VacationState\";\nimport appConfig from \"../Utils/AppConfig\";\nimport notifyService from \"./NotifyService\";\nclass VacationsService {\n  async addVacation(vacation) {\n    const options = {\n      headers: {\n        \"Authorization\": \"Bearer \" + authStore.getState().token,\n        \"Content-Type\": \"multipart/form-data\" // Include files in the request\n      }\n    };\n\n    // Send Vacation to the backend\n    const response = await axios.post(appConfig.vacationsUrl, vacation, options);\n\n    // Extract the added Vacation sent back from the backend:\n    const addedVacation = response.data;\n\n    // Add added Vacation to global state:\n    const action = {\n      type: VacationsActionType.AddVacation,\n      payload: addedVacation\n    };\n    vacationStore.dispatch(action);\n  }\n  async getFollowedVacations(userId) {\n    const options = {\n      headers: {\n        \"Authorization\": \"Bearer \" + authStore.getState().token\n      }\n    };\n    const response = await axios.get(appConfig.getFollowedVacations + userId, options);\n    const vacations = response.data;\n    return vacations;\n  }\n  async editVacation(vacation) {\n    try {\n      const options = {\n        headers: {\n          \"Authorization\": \"Bearer \" + authStore.getState().token,\n          \"Content-Type\": \"multipart/form-data\" // Include files in the request\n        }\n      };\n\n      // Send the edited vacation to the backend\n      const response = await axios.put(appConfig.vacationsUrl + vacation.vacationId,\n      // Assuming this is the endpoint for editing a vacation\n      vacation, options);\n\n      // Extract the edited vacation sent back from the backend:\n      const editedVacation = response.data;\n\n      // Update the vacation in the global state:\n      const action = {\n        type: VacationsActionType.EditVacation,\n        payload: editedVacation\n      };\n      vacationStore.dispatch(action);\n      return editedVacation;\n    } catch (err) {\n      notifyService.error(err);\n      retur;\n    }\n  }\n\n  //Get one Vacation from the backend:\n  async getOneVacation(id) {\n    const options = {\n      headers: {\n        \"Authorization\": \"Bearer \" + authStore.getState().token,\n        \"Content-Type\": \"multipart/form-data\" // Include files in the request\n      }\n    };\n\n    // Get Vacations from global state:\n    let vacations = vacationStore.getState().vacations;\n\n    // Find desired vacation:\n    let vacation = vacations.find(vacation => vacation.vacationId === id);\n\n    //if vacation not found:\n    if (!vacation) {\n      // Get one vacation into response Object:\n      const response = await axios.get(appConfig.getOneVacation + id, options);\n\n      //Extract the vacation from the response\n      vacation = response.data;\n    }\n    // return vacation:\n    return vacation;\n  }\n  async deleteVacation(vacationId) {\n    const options = {\n      headers: {\n        \"Authorization\": \"Bearer \" + authStore.getState().token\n      }\n    };\n\n    // Send a DELETE request to the backend to delete the vacation\n    await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, options);\n  }\n}\nconst vacationsService = new VacationsService();\nexport default vacationsService;","map":{"version":3,"names":["axios","authStore","VacationsActionType","vacationStore","appConfig","notifyService","VacationsService","addVacation","vacation","options","headers","getState","token","response","post","vacationsUrl","addedVacation","data","action","type","AddVacation","payload","dispatch","getFollowedVacations","userId","get","vacations","editVacation","put","vacationId","editedVacation","EditVacation","err","error","retur","getOneVacation","id","find","deleteVacation","delete","vacationsService"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport VacationModel from \"../Models/VacationModel\";\r\nimport { authStore } from \"../Redux/AuthState\";\r\nimport { VacationAction, VacationsActionType, vacationStore } from \"../Redux/VacationState\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport { log } from \"console\";\r\nimport notifyService from \"./NotifyService\";\r\n\r\nclass VacationsService {\r\n\r\n    public async addVacation(vacation: VacationModel): Promise<void> {\r\n        const options = {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + authStore.getState().token,\r\n                \"Content-Type\": \"multipart/form-data\" // Include files in the request\r\n            }\r\n        };\r\n\r\n        // Send Vacation to the backend\r\n        const response = await axios.post<VacationModel>(appConfig.vacationsUrl, vacation, options);\r\n\r\n        // Extract the added Vacation sent back from the backend:\r\n        const addedVacation = response.data;\r\n\r\n        // Add added Vacation to global state:\r\n        const action: VacationAction = { type: VacationsActionType.AddVacation, payload: addedVacation };\r\n        vacationStore.dispatch(action);\r\n\r\n    }\r\n\r\n    public async getFollowedVacations(userId: number): Promise<VacationModel[]> {\r\n\r\n        const options = {\r\n            headers: { \"Authorization\": \"Bearer \" + authStore.getState().token }\r\n        }\r\n\r\n        const response = await axios.get(appConfig.getFollowedVacations + userId, options);\r\n        const vacations = response.data;\r\n        return vacations;\r\n    }\r\n\r\n    public async editVacation(vacation: VacationModel): Promise<VacationModel> {\r\n\r\n        try {\r\n            const options = {\r\n                headers: {\r\n                    \"Authorization\": \"Bearer \" + authStore.getState().token,\r\n                    \"Content-Type\": \"multipart/form-data\" // Include files in the request\r\n                }\r\n            };\r\n\r\n            // Send the edited vacation to the backend\r\n            const response = await axios.put<VacationModel>(\r\n                appConfig.vacationsUrl + vacation.vacationId, // Assuming this is the endpoint for editing a vacation\r\n                vacation,\r\n                options\r\n            );\r\n\r\n            // Extract the edited vacation sent back from the backend:\r\n            const editedVacation = response.data;\r\n\r\n            // Update the vacation in the global state:\r\n            const action: VacationAction = {\r\n                type: VacationsActionType.EditVacation,\r\n                payload: editedVacation\r\n            };\r\n            vacationStore.dispatch(action);\r\n\r\n            return editedVacation;\r\n        }\r\n        catch (err: any) {\r\n            notifyService.error(err);\r\n            retur\r\n        }\r\n    }\r\n\r\n    //Get one Vacation from the backend:\r\n    public async getOneVacation(id: number): Promise<VacationModel> {\r\n\r\n        const options = {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + authStore.getState().token,\r\n                \"Content-Type\": \"multipart/form-data\" // Include files in the request\r\n            }\r\n        };\r\n\r\n        // Get Vacations from global state:\r\n        let vacations = vacationStore.getState().vacations;\r\n\r\n        // Find desired vacation:\r\n        let vacation = vacations.find(vacation => vacation.vacationId === id)\r\n\r\n        //if vacation not found:\r\n        if (!vacation) {\r\n\r\n            // Get one vacation into response Object:\r\n            const response = await axios.get<VacationModel>(appConfig.getOneVacation + id, options);\r\n\r\n            //Extract the vacation from the response\r\n            vacation = response.data;\r\n\r\n        }\r\n        // return vacation:\r\n        return vacation;\r\n    }\r\n\r\n    public async deleteVacation(vacationId: number): Promise<void> {\r\n        const options = {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + authStore.getState().token,\r\n            },\r\n        };\r\n\r\n        // Send a DELETE request to the backend to delete the vacation\r\n        await axios.delete(`${appConfig.vacationsUrl}${vacationId}`, options);\r\n    }\r\n}\r\nconst vacationsService = new VacationsService();\r\n\r\nexport default vacationsService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}