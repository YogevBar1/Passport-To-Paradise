{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Passport To Paradise\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\ReportVacation\\\\ReportVacation.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis, YAxis } from \"recharts\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\n\n/**\n * ReportVacation Component:\n * This component is responsible for displaying a bar chart that represents vacation followers count.\n * It fetches the data of followed vacations for the admin user and displays it in a bar chart.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportVacation = () => {\n  _s();\n  // State to store vacation data for the chart\n  const [vacationFollowersData, setVacationFollowersData] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if the user login:\n    const token = authStore.getState().token;\n    if (!token) {\n      notifyService.error(\"Please Login\");\n      navigate(\"/login\");\n      return;\n    }\n\n    // Check if the user admin:\n    const role = authStore.getState().user.roleId;\n    if (role !== RoleModel.Admin) {\n      notifyService.error(\"You don`t have access to this page\");\n      navigate(\"/home\");\n    }\n\n    // Fetch and load vacation data for the chart\n    const fetchData = async () => {\n      try {\n        // Fetch followed vacations for the logged-in user\n        const vacations = await vacationsService.getFollowedVacations(authStore.getState().user.userId);\n\n        // Prepare data for the chart by mapping vacation properties\n        const data = vacations.map(vacation => ({\n          vacationDestination: vacation.vacationDestination,\n          followersCount: vacation.followersCount\n        }));\n\n        // Set the data in the state\n        setVacationFollowersData(data);\n      } catch (error) {\n        // Handle error here\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    // Call fetchData when the component mounts\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vacation Followers Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 1800,\n      height: 300,\n      data: vacationFollowersData,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"vacationDestination\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"followersCount\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(ReportVacation, \"aKd8fSPbR5tFrCZ+OKvzHKrj+hk=\", false, function () {\n  return [useNavigate];\n});\n_c = ReportVacation;\nexport default ReportVacation;\nvar _c;\n$RefreshReg$(_c, \"ReportVacation\");","map":{"version":3,"names":["useEffect","useState","useNavigate","Bar","BarChart","CartesianGrid","Legend","XAxis","YAxis","RoleModel","authStore","notifyService","vacationsService","jsxDEV","_jsxDEV","ReportVacation","_s","vacationFollowersData","setVacationFollowersData","navigate","token","getState","error","role","user","roleId","Admin","fetchData","vacations","getFollowedVacations","userId","data","map","vacation","vacationDestination","followersCount","console","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","fill","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Components/VacationArea/ReportVacation/ReportVacation.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Bar, BarChart, CartesianGrid, Legend, XAxis, YAxis } from \"recharts\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\n\n/**\n * ReportVacation Component:\n * This component is responsible for displaying a bar chart that represents vacation followers count.\n * It fetches the data of followed vacations for the admin user and displays it in a bar chart.\n */\nconst ReportVacation = () => {\n    // State to store vacation data for the chart\n    const [vacationFollowersData, setVacationFollowersData] = useState<{ vacationDestination: string; followersCount: number; }[]>([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Check if the user login:\n        const token = authStore.getState().token;\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        // Check if the user admin:\n        const role = authStore.getState().user.roleId;\n        if (role !== RoleModel.Admin) {\n            notifyService.error(\"You don`t have access to this page\");\n            navigate(\"/home\");\n        }\n\n        // Fetch and load vacation data for the chart\n        const fetchData = async () => {\n            try {\n                // Fetch followed vacations for the logged-in user\n                const vacations = await vacationsService.getFollowedVacations(authStore.getState().user.userId);\n\n                // Prepare data for the chart by mapping vacation properties\n                const data = vacations.map((vacation) => ({\n                    vacationDestination: vacation.vacationDestination,\n                    followersCount: vacation.followersCount\n                }));\n\n                // Set the data in the state\n                setVacationFollowersData(data);\n\n            } catch (error) {\n                // Handle error here\n                console.error(\"Error fetching data:\", error);\n            }\n        };\n        \n        // Call fetchData when the component mounts\n        fetchData();\n    }, []);\n\n    return (\n        <div>\n            <h2>Vacation Followers Report</h2>\n            <BarChart width={1800} height={300} data={vacationFollowersData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"vacationDestination\" />\n                <YAxis />\n                <Legend />\n                <Bar dataKey=\"followersCount\"  fill=\"#8884d8\" />\n            </BarChart>\n        </div>\n    );\n};\n\nexport default ReportVacation;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,QAAQ,UAAU;AAC7E,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,gBAAgB,MAAM,oCAAoC;;AAEjE;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGjB,QAAQ,CAA6D,EAAE,CAAC;EAClI,MAAMkB,QAAQ,GAAGjB,WAAW,EAAE;EAE9BF,SAAS,CAAC,MAAM;IACZ;IACA,MAAMoB,KAAK,GAAGV,SAAS,CAACW,QAAQ,EAAE,CAACD,KAAK;IACxC,IAAI,CAACA,KAAK,EAAE;MACRT,aAAa,CAACW,KAAK,CAAC,cAAc,CAAC;MACnCH,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACJ;;IAEA;IACA,MAAMI,IAAI,GAAGb,SAAS,CAACW,QAAQ,EAAE,CAACG,IAAI,CAACC,MAAM;IAC7C,IAAIF,IAAI,KAAKd,SAAS,CAACiB,KAAK,EAAE;MAC1Bf,aAAa,CAACW,KAAK,CAAC,oCAAoC,CAAC;MACzDH,QAAQ,CAAC,OAAO,CAAC;IACrB;;IAEA;IACA,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA;QACA,MAAMC,SAAS,GAAG,MAAMhB,gBAAgB,CAACiB,oBAAoB,CAACnB,SAAS,CAACW,QAAQ,EAAE,CAACG,IAAI,CAACM,MAAM,CAAC;;QAE/F;QACA,MAAMC,IAAI,GAAGH,SAAS,CAACI,GAAG,CAAEC,QAAQ,KAAM;UACtCC,mBAAmB,EAAED,QAAQ,CAACC,mBAAmB;UACjDC,cAAc,EAAEF,QAAQ,CAACE;QAC7B,CAAC,CAAC,CAAC;;QAEH;QACAjB,wBAAwB,CAACa,IAAI,CAAC;MAElC,CAAC,CAAC,OAAOT,KAAK,EAAE;QACZ;QACAc,OAAO,CAACd,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;;IAED;IACAK,SAAS,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIb,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAAuB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAClC3B,OAAA,CAACV,QAAQ;MAACsC,KAAK,EAAE,IAAK;MAACC,MAAM,EAAE,GAAI;MAACZ,IAAI,EAAEd,qBAAsB;MAAAoB,QAAA,gBAC5DvB,OAAA,CAACT,aAAa;QAACuC,eAAe,EAAC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACvC3B,OAAA,CAACP,KAAK;QAACsC,OAAO,EAAC;MAAqB;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACvC3B,OAAA,CAACN,KAAK;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACT3B,OAAA,CAACR,MAAM;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACV3B,OAAA,CAACX,GAAG;QAAC0C,OAAO,EAAC,gBAAgB;QAAEC,IAAI,EAAC;MAAS;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACzC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEd,CAAC;AAACzB,EAAA,CA1DID,cAAc;EAAA,QAGCb,WAAW;AAAA;AAAA6C,EAAA,GAH1BhC,cAAc;AA4DpB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}