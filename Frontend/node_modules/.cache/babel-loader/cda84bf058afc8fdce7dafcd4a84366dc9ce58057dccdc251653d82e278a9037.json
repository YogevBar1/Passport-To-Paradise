{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/AppConfig\";\nimport { AuthActionType, authStore } from \"../Redux/AuthState\";\nclass AuthService {\n  // Register new user: \n  async register(user) {\n    // Send new user to backend:\n    const response = await axios.post(appConfig.registerUrl, user);\n\n    // Extract the token:\n    const token = response.data;\n\n    // Send token to global state:\n    const action = {\n      type: AuthActionType.Register,\n      payload: token\n    };\n    authStore.dispatch(action);\n  }\n\n  // Login existing user:\n  async login(credentials) {\n    // Send credentials to backend:\n    const response = await axios.post(appConfig.loginUrl, credentials);\n\n    // Extract the token:\n    const token = response.data;\n\n    // Send token to global state:\n    const action = {\n      type: AuthActionType.Login,\n      payload: token\n    };\n    authStore.dispatch(action);\n  }\n\n  // Logout: \n  logout() {\n    // Call logout in global state:\n    const action = {\n      type: AuthActionType.Logout\n    };\n    authStore.dispatch(action);\n  }\n  isLoggedOn() {\n    return authStore.getState().token !== null;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","appConfig","AuthActionType","authStore","AuthService","register","user","response","post","registerUrl","token","data","action","type","Register","payload","dispatch","login","credentials","loginUrl","Login","logout","Logout","isLoggedOn","getState","authService"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Services/AuthService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport UserModel from \"../Models/UserModel\";\r\nimport appConfig from \"../Utils/AppConfig\";\r\nimport { AuthAction, AuthActionType, authStore } from \"../Redux/AuthState\";\r\nimport CredentialsModel from \"../Models/CredentialsModel\";\r\n\r\nclass AuthService {\r\n\r\n    // Register new user: \r\n    public async register(user: UserModel): Promise<void> {\r\n\r\n        // Send new user to backend:\r\n        const response = await axios.post<string>(appConfig.registerUrl, user);\r\n\r\n        // Extract the token:\r\n        const token = response.data;\r\n\r\n        // Send token to global state:\r\n        const action: AuthAction = { type: AuthActionType.Register, payload: token };\r\n        authStore.dispatch(action);\r\n    }\r\n\r\n    // Login existing user:\r\n    public async login(credentials: CredentialsModel): Promise<void> {\r\n\r\n        // Send credentials to backend:\r\n        const response = await axios.post<string>(appConfig.loginUrl, credentials);\r\n        \r\n        // Extract the token:\r\n        const token = response.data;      \r\n        \r\n        // Send token to global state:\r\n        const action: AuthAction = { type: AuthActionType.Login, payload: token };\r\n        authStore.dispatch(action);\r\n    }\r\n    \r\n    // Logout: \r\n    public logout(): void {\r\n        // Call logout in global state:\r\n        const action: AuthAction = { type: AuthActionType.Logout };\r\n        authStore.dispatch(action);\r\n    }\r\n\r\n    public isLoggedOn(): boolean {\r\n        return authStore.getState().token !== null;\r\n    }\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,SAAqBC,cAAc,EAAEC,SAAS,QAAQ,oBAAoB;AAG1E,MAAMC,WAAW,CAAC;EAEd;EACA,MAAaC,QAAQA,CAACC,IAAe,EAAiB;IAElD;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAASP,SAAS,CAACQ,WAAW,EAAEH,IAAI,CAAC;;IAEtE;IACA,MAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAI;;IAE3B;IACA,MAAMC,MAAkB,GAAG;MAAEC,IAAI,EAAEX,cAAc,CAACY,QAAQ;MAAEC,OAAO,EAAEL;IAAM,CAAC;IAC5EP,SAAS,CAACa,QAAQ,CAACJ,MAAM,CAAC;EAC9B;;EAEA;EACA,MAAaK,KAAKA,CAACC,WAA6B,EAAiB;IAE7D;IACA,MAAMX,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAASP,SAAS,CAACkB,QAAQ,EAAED,WAAW,CAAC;;IAE1E;IACA,MAAMR,KAAK,GAAGH,QAAQ,CAACI,IAAI;;IAE3B;IACA,MAAMC,MAAkB,GAAG;MAAEC,IAAI,EAAEX,cAAc,CAACkB,KAAK;MAAEL,OAAO,EAAEL;IAAM,CAAC;IACzEP,SAAS,CAACa,QAAQ,CAACJ,MAAM,CAAC;EAC9B;;EAEA;EACOS,MAAMA,CAAA,EAAS;IAClB;IACA,MAAMT,MAAkB,GAAG;MAAEC,IAAI,EAAEX,cAAc,CAACoB;IAAO,CAAC;IAC1DnB,SAAS,CAACa,QAAQ,CAACJ,MAAM,CAAC;EAC9B;EAEOW,UAAUA,CAAA,EAAY;IACzB,OAAOpB,SAAS,CAACqB,QAAQ,EAAE,CAACd,KAAK,KAAK,IAAI;EAC9C;AACJ;AAEA,MAAMe,WAAW,GAAG,IAAIrB,WAAW,EAAE;AAErC,eAAeqB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}