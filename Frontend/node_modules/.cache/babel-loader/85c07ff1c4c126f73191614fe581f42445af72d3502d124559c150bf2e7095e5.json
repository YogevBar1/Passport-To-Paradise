{"ast":null,"code":"import { createStore } from \"redux\";\n// 1. Global State:\nexport class VacationState {\n  constructor() {\n    this.vacations = [];\n  } // Init with an empty array\n}\n\n// 2. Action type:\nexport let VacationsActionType;\n\n// 3. Action:\n(function (VacationsActionType) {\n  VacationsActionType[\"AddVacation\"] = \"AddVacation\";\n  VacationsActionType[\"EditVacation\"] = \"EditVacation\";\n  VacationsActionType[\"DeleteVacation\"] = \"DeleteVacation\";\n})(VacationsActionType || (VacationsActionType = {}));\n// 4. Reducer (invoked by the redux library):\nexport function vacationsReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new VacationState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  }; // Duplicate the global state\n\n  // Change the duplicated global state according to the action:\n  switch (action.type) {\n    case VacationsActionType.AddVacation:\n      // Here the payload is a single vacation to add:\n      newState.vacations.push(action.payload); // Add that vacation into the global state.\n      break;\n    case VacationsActionType.EditVacation:\n      // Here the payload is a single vacation to update\n      const indexToUpdate = newState.vacations.findIndex(v => v.vacationId === action.payload.id);\n      if (indexToUpdate >= 0) newState.vacations[indexToUpdate] = action.payload;\n      break;\n    case VacationsActionType.DeleteVacation:\n      // Here the payload is the id to delete\n      const indexToDelete = newState.vacations.findIndex(v => v.vacationId === action.payload);\n      if (indexToDelete >= 0) newState.vacations.splice(indexToDelete, 1);\n      break;\n  }\n  return newState; // Return the changed duplicated global state.\n}\n\n// 5. Store:\nexport const vacationStore = createStore(vacationsReducer);","map":{"version":3,"names":["createStore","VacationState","constructor","vacations","VacationsActionType","vacationsReducer","currentState","arguments","length","undefined","action","newState","type","AddVacation","push","payload","EditVacation","indexToUpdate","findIndex","v","vacationId","id","DeleteVacation","indexToDelete","splice","vacationStore"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Redux/VacationState.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport VacationModel from \"../Models/VacationModel\";\r\n\r\n// 1. Global State:\r\nexport class VacationState {\r\n    public vacations: VacationModel[] = []; // Init with an empty array\r\n}\r\n\r\n// 2. Action type:\r\nexport enum VacationsActionType {\r\n    AddVacation = \"AddVacation\",\r\n    EditVacation = \"EditVacation\",\r\n    DeleteVacation = \"DeleteVacation\"\r\n}\r\n\r\n// 3. Action:\r\nexport interface VacationAction {\r\n    type: VacationsActionType;  // Action Type\r\n    payload?: any; // The data related to the action\r\n}\r\n\r\n// 4. Reducer (invoked by the redux library):\r\nexport function vacationsReducer(currentState = new VacationState(), action: VacationAction): VacationState {\r\n    const newState = { ...currentState }; // Duplicate the global state\r\n\r\n    // Change the duplicated global state according to the action:\r\n    switch (action.type) {\r\n\r\n        case VacationsActionType.AddVacation: // Here the payload is a single vacation to add:\r\n            newState.vacations.push(action.payload); // Add that vacation into the global state.\r\n            break;\r\n\r\n        case VacationsActionType.EditVacation: // Here the payload is a single vacation to update\r\n            const indexToUpdate = newState.vacations.findIndex(v => v.vacationId === action.payload.id);\r\n            if (indexToUpdate >= 0) newState.vacations[indexToUpdate] = action.payload;\r\n            break;\r\n\r\n        case VacationsActionType.DeleteVacation: // Here the payload is the id to delete\r\n            const indexToDelete = newState.vacations.findIndex(v =>  v.vacationId === action.payload);\r\n            if (indexToDelete >= 0) newState.vacations.splice(indexToDelete, 1);\r\n            break;\r\n    }\r\n\r\n    return newState; // Return the changed duplicated global state.\r\n}\r\n\r\n// 5. Store:\r\nexport const vacationStore = createStore(vacationsReducer);\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAGnC;AACA,OAAO,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KAChBC,SAAS,GAAoB,EAAE;EAAA,EAAE;AAC5C;;AAEA;AACA,WAAYC,mBAAmB;;AAM/B;AAAA,WANYA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;EAAnBA,mBAAmB;AAAA,GAAnBA,mBAAmB,KAAnBA,mBAAmB;AAY/B;AACA,OAAO,SAASC,gBAAgBA,CAAA,EAA4E;EAAA,IAA3EC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIN,aAAa,EAAE;EAAA,IAAES,MAAsB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACvF,MAAME,QAAQ,GAAG;IAAE,GAAGL;EAAa,CAAC,CAAC,CAAC;;EAEtC;EACA,QAAQI,MAAM,CAACE,IAAI;IAEf,KAAKR,mBAAmB,CAACS,WAAW;MAAE;MAClCF,QAAQ,CAACR,SAAS,CAACW,IAAI,CAACJ,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC;MACzC;IAEJ,KAAKX,mBAAmB,CAACY,YAAY;MAAE;MACnC,MAAMC,aAAa,GAAGN,QAAQ,CAACR,SAAS,CAACe,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,KAAKV,MAAM,CAACK,OAAO,CAACM,EAAE,CAAC;MAC3F,IAAIJ,aAAa,IAAI,CAAC,EAAEN,QAAQ,CAACR,SAAS,CAACc,aAAa,CAAC,GAAGP,MAAM,CAACK,OAAO;MAC1E;IAEJ,KAAKX,mBAAmB,CAACkB,cAAc;MAAE;MACrC,MAAMC,aAAa,GAAGZ,QAAQ,CAACR,SAAS,CAACe,SAAS,CAACC,CAAC,IAAKA,CAAC,CAACC,UAAU,KAAKV,MAAM,CAACK,OAAO,CAAC;MACzF,IAAIQ,aAAa,IAAI,CAAC,EAAEZ,QAAQ,CAACR,SAAS,CAACqB,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;MACnE;EAAM;EAGd,OAAOZ,QAAQ,CAAC,CAAC;AACrB;;AAEA;AACA,OAAO,MAAMc,aAAa,GAAGzB,WAAW,CAACK,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}