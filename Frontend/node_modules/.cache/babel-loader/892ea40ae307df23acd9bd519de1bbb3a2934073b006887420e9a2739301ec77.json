{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Passport To Paradise\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\ListVacation\\\\ListVacation.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport VacationCard from \"../VacationCard/VacationCard\";\nimport \"./ListVacation.css\";\nimport RoleModel from \"../../../Models/RoleModel\";\n\n/**\n * The `ListVacation` component displays a list of vacations, with filtering options for users.\n * Administrators can view all vacations, download vacation data as a CSV file, and add new vacations.\n * Users can filter vacations by followed status, upcoming start dates, and currently active vacations.\n * Users can also view and interact with vacation cards, including following/unfollowing vacations.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ListVacation() {\n  _s();\n  const navigate = useNavigate();\n  const [frontendVacations, setFrontendVacations] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const vacationsPerPage = 9;\n  const [user, setUser] = useState();\n  const [showFollowed, setShowFollowed] = useState(false); // State to track if checkbox is checked\n  const [showUpcoming, setShowUpcoming] = useState(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n  const [showActive, setShowActive] = useState(false); // State to track if \"Show Active Vacations\" checkbox is checked\n  const [vacationDeleted, setVacationDeleted] = useState(false); // Add state to trigger re-render\n\n  const [filteredVacations, setFilteredVacations] = useState([]); // State to store filtered vacations\n\n  const handleUpdateVacations = (vacationId, followed) => {\n    // Update the frontendVacations state\n    setFrontendVacations(prevVacations => prevVacations.map(vacation => vacation.vacationId === vacationId ? {\n      ...vacation,\n      isFollowing: followed\n    } : vacation));\n  };\n  useEffect(() => {\n    // Check if the user login:\n    const token = authStore.getState().token;\n    // If the user is not logged in, show an error message and navigate to the login page\n    if (!token) {\n      notifyService.error(\"Please Login\");\n      navigate(\"/login\");\n      return;\n    }\n\n    // Get the logged-in user from the application state and set it in the component's state\n    const loggedUser = authStore.getState().user;\n    setUser(loggedUser);\n\n    // Fetch followed vacations for the logged-in user and update component state\n    vacationsService.getFollowedVacations(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.userId).then(backendVacations => {\n      // Sort the fetched vacations by start date\n      backendVacations.sort((a, b) => new Date(a.vacationStartDate).getTime() - new Date(b.vacationStartDate).getTime());\n      // Set both frontend and filtered vacations to the fetched data\n      setFrontendVacations(backendVacations);\n      setFilteredVacations(backendVacations);\n    }).catch(err => notifyService.error(err));\n  }, [navigate, vacationDeleted]);\n\n  // Function to convert data to CSV\n  function convertToCSV(data) {\n    const header = \"Followers,Destination\\n\";\n    // Map each vacation to a CSV row containing followers count and destination\n    const csvData = data.map(item => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n    return header + csvData;\n  }\n\n  // Handler for changing the current page in pagination\n  const handlePageChange = newPage => {\n    setCurrentPage(newPage);\n  };\n\n  // Calculate the total number of pages based on the filtered vacations and vacations per page\n  const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n\n  // Calculate the index of the last vacation to display on the current page\n  const indexOfLastVacation = currentPage * vacationsPerPage;\n\n  // Calculate the index of the first vacation to display on the current page\n  const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n  // Function to filter vacations based on the checkbox state\n  const handleCheckboxChange = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n\n    // Create new state variables for each checkbox\n    let newShowFollowed = showFollowed;\n    let newShowUpcoming = showUpcoming;\n    let newShowActive = showActive;\n    if (name === \"showFollowed\") {\n      newShowFollowed = checked;\n    } else if (name === \"showUpcoming\") {\n      newShowUpcoming = checked;\n    } else if (name === \"showActive\") {\n      newShowActive = checked;\n    }\n\n    // Calculate the filtered vacations based on the new checkbox states\n    // Calculate the current date for filtering\n    const currentDate = new Date();\n    // Filter the vacations based on the new checkbox states\n    const filteredVacationsByCheckbox = frontendVacations.filter(vacation => {\n      // Determine if the \"Show Followed Vacations\" checkbox is checked\n      const isFollowed = newShowFollowed;\n\n      // Determine if the \"Show Upcoming Vacations\" checkbox is checked\n      const isUpcoming = newShowUpcoming;\n\n      // Determine if the \"Show Active Vacations\" checkbox is checked\n      const isActive = newShowActive;\n\n      // Convert vacation start and end dates to Date objects\n      const vacationStartDate = new Date(vacation.vacationStartDate);\n      const vacationEndDate = new Date(vacation.vacationEndDate);\n\n      // Define the filter conditions based on the combination of checkboxes\n      let meetsFilterConditions = true;\n      if (isFollowed) {\n        meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n      }\n      // Check if \"Show Upcoming Vacations\" is checked and the vacation starts in the future\n      if (isUpcoming) {\n        meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n      }\n      // Check if \"Show Active Vacations\" is checked and the vacation is currently active\n      if (isActive) {\n        meetsFilterConditions = meetsFilterConditions && vacationStartDate <= currentDate && vacationEndDate >= currentDate;\n      }\n      // Return true if the vacation meets all filter conditions, otherwise false\n      return meetsFilterConditions;\n    });\n\n    // Update the checkbox states and filtered vacations\n    setShowFollowed(newShowFollowed);\n    setShowUpcoming(newShowUpcoming);\n    setShowActive(newShowActive);\n    setFilteredVacations(filteredVacationsByCheckbox);\n    setCurrentPage(1);\n  };\n  const currentVacations = filteredVacations.slice(indexOfFirstVacation, indexOfLastVacation);\n\n  // Function to handle deleting a vacation\n  const handleDeleteVacation = async vacationId => {\n    try {\n      // Display a confirmation dialog\n      const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n      if (!confirmed) {\n        // The user canceled the deletion\n        return;\n      }\n\n      // Call the deleteVacation function from the vacationsService\n      await vacationsService.deleteVacation(vacationId);\n\n      // Update the frontendVacations state by filtering out the deleted vacation\n      setFrontendVacations(prevVacations => prevVacations.filter(vacation => vacation.vacationId !== vacationId));\n      notifyService.success(\"The vacation has been successfully deleted\");\n\n      // Trigger a re-render by updating vacationDeleted\n      setVacationDeleted(prevValue => !prevValue);\n    } catch (error) {\n      console.error(\"Error deleting vacation:\", error);\n    }\n  };\n\n  // Function to handle downloading the CSV\n  function handleDownloadCSV() {\n    // Generate a timestamp for the current date and time\n    const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n\n    // Create a filename with the timestamp\n    const filename = `vacations_${timestamp}.csv`;\n\n    // Convert the filteredVacations data to CSV format\n    const csvData = convertToCSV(filteredVacations);\n\n    // Create a Blob object with the CSV data\n    const blob = new Blob([csvData], {\n      type: \"text/csv\"\n    });\n\n    // Create a temporary URL for the Blob\n    const url = window.URL.createObjectURL(blob);\n\n    // Create an anchor element for the download\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename; // Use the filename with the timestamp\n\n    // Trigger a click event to start the download\n    a.click();\n\n    // Clean up by revoking the Blob URL\n    window.URL.revokeObjectURL(url);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"List\",\n    children: [user && user.roleId === RoleModel.Admin && /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/vacations/add\",\n      children: \"Add Vacation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), user && user.roleId === RoleModel.Admin && /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/vacations/report\",\n      children: \"Vacation Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 57\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: user && user.roleId === RoleModel.Admin && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadCSV,\n        className: \"btn btn-primary\",\n        children: \"Download CSV file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), user && user.roleId === RoleModel.User && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showFollowed\",\n          checked: showFollowed,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this), \" \", \"Show Followed Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showUpcoming\",\n          checked: showUpcoming,\n          disabled: showActive,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this), \" \", \"Show Upcoming Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showActive\",\n          checked: showActive,\n          disabled: showUpcoming,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this), \" \", \"Show Active Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: filteredVacations.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage - 1),\n          disabled: currentPage === 1,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this), Array.from({\n          length: totalPages\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(i + 1),\n          className: currentPage === i + 1 ? \"active\" : \"\",\n          children: i + 1\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(currentPage + 1),\n          disabled: currentPage === totalPages,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Our Vacations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this), currentVacations.map(vacation => /*#__PURE__*/_jsxDEV(VacationCard, {\n      vacation: vacation,\n      userId: user.userId,\n      followersCount: vacation.followersCount,\n      user: user,\n      onDelete: handleDeleteVacation,\n      onUpdateVacations: handleUpdateVacations\n    }, vacation.vacationId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(i + 1),\n        className: currentPage === i + 1 ? \"active\" : \"\",\n        children: i + 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n}\n_s(ListVacation, \"C4VYMdDE/0Qd0QNwydArY9mHAcA=\", false, function () {\n  return [useNavigate];\n});\n_c = ListVacation;\nexport default ListVacation;\nvar _c;\n$RefreshReg$(_c, \"ListVacation\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","useNavigate","authStore","notifyService","vacationsService","VacationCard","RoleModel","jsxDEV","_jsxDEV","Fragment","_Fragment","ListVacation","_s","navigate","frontendVacations","setFrontendVacations","currentPage","setCurrentPage","vacationsPerPage","user","setUser","showFollowed","setShowFollowed","showUpcoming","setShowUpcoming","showActive","setShowActive","vacationDeleted","setVacationDeleted","filteredVacations","setFilteredVacations","handleUpdateVacations","vacationId","followed","prevVacations","map","vacation","isFollowing","token","getState","error","loggedUser","getFollowedVacations","userId","then","backendVacations","sort","a","b","Date","vacationStartDate","getTime","catch","err","convertToCSV","data","header","csvData","item","followersCount","vacationDestination","join","handlePageChange","newPage","totalPages","Math","ceil","length","indexOfLastVacation","indexOfFirstVacation","handleCheckboxChange","e","name","checked","target","newShowFollowed","newShowUpcoming","newShowActive","currentDate","filteredVacationsByCheckbox","filter","isFollowed","isUpcoming","isActive","vacationEndDate","meetsFilterConditions","currentVacations","slice","handleDeleteVacation","confirmed","window","confirm","deleteVacation","success","prevValue","console","handleDownloadCSV","timestamp","toISOString","replace","filename","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","className","children","roleId","Admin","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","User","onChange","disabled","Array","from","_","i","onDelete","onUpdateVacations","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Components/VacationArea/ListVacation/ListVacation.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport UserModel from \"../../../Models/UserModel\";\nimport VacationModel from \"../../../Models/VacationModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport VacationCard from \"../VacationCard/VacationCard\";\nimport \"./ListVacation.css\";\nimport RoleModel from \"../../../Models/RoleModel\";\n\n/**\n * The `ListVacation` component displays a list of vacations, with filtering options for users.\n * Administrators can view all vacations, download vacation data as a CSV file, and add new vacations.\n * Users can filter vacations by followed status, upcoming start dates, and currently active vacations.\n * Users can also view and interact with vacation cards, including following/unfollowing vacations.\n */\nfunction ListVacation(): JSX.Element {\n    const navigate = useNavigate();\n    const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n        []\n    );\n    const [currentPage, setCurrentPage] = useState<number>(1);\n    const vacationsPerPage = 9;\n    const [user, setUser] = useState<UserModel>();\n    const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n    const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n    const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n    const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n\n    const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n        []\n    ); // State to store filtered vacations\n\n    const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n        // Update the frontendVacations state\n        setFrontendVacations((prevVacations) =>\n            prevVacations.map((vacation) =>\n                vacation.vacationId === vacationId\n                    ? { ...vacation, isFollowing: followed }\n                    : vacation\n            )\n        );\n    };\n\n    useEffect(() => {\n        // Check if the user login:\n        const token = authStore.getState().token;\n        // If the user is not logged in, show an error message and navigate to the login page\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        // Get the logged-in user from the application state and set it in the component's state\n        const loggedUser = authStore.getState().user;\n        setUser(loggedUser);\n\n        // Fetch followed vacations for the logged-in user and update component state\n        vacationsService\n            .getFollowedVacations(loggedUser?.userId)\n            .then(backendVacations => {\n                // Sort the fetched vacations by start date\n                backendVacations.sort(\n                    (a, b) =>\n                        new Date(a.vacationStartDate).getTime() -\n                        new Date(b.vacationStartDate).getTime()\n                );\n                // Set both frontend and filtered vacations to the fetched data\n                setFrontendVacations(backendVacations);\n                setFilteredVacations(backendVacations);\n            })\n            .catch((err) => notifyService.error(err));\n    }, [navigate, vacationDeleted]);\n\n    // Function to convert data to CSV\n    function convertToCSV(data: VacationModel[]): string {\n        const header = \"Followers,Destination\\n\";\n        // Map each vacation to a CSV row containing followers count and destination\n        const csvData = data.map((item) => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n        return header + csvData;\n    }\n\n    // Handler for changing the current page in pagination\n    const handlePageChange = (newPage: number) => {\n        setCurrentPage(newPage);\n    };\n\n    // Calculate the total number of pages based on the filtered vacations and vacations per page\n    const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n\n    // Calculate the index of the last vacation to display on the current page\n    const indexOfLastVacation = currentPage * vacationsPerPage;\n\n    // Calculate the index of the first vacation to display on the current page\n    const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n    // Function to filter vacations based on the checkbox state\n    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, checked } = e.target;\n\n        // Create new state variables for each checkbox\n        let newShowFollowed = showFollowed;\n        let newShowUpcoming = showUpcoming;\n        let newShowActive = showActive;\n\n        if (name === \"showFollowed\") {\n            newShowFollowed = checked;\n        } else if (name === \"showUpcoming\") {\n            newShowUpcoming = checked;\n        } else if (name === \"showActive\") {\n            newShowActive = checked;\n        }\n\n        // Calculate the filtered vacations based on the new checkbox states\n        // Calculate the current date for filtering\n        const currentDate = new Date();\n        // Filter the vacations based on the new checkbox states\n        const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n            // Determine if the \"Show Followed Vacations\" checkbox is checked\n            const isFollowed = newShowFollowed;\n\n            // Determine if the \"Show Upcoming Vacations\" checkbox is checked\n            const isUpcoming = newShowUpcoming;\n\n            // Determine if the \"Show Active Vacations\" checkbox is checked\n            const isActive = newShowActive;\n\n            // Convert vacation start and end dates to Date objects\n            const vacationStartDate = new Date(vacation.vacationStartDate);\n            const vacationEndDate = new Date(vacation.vacationEndDate);\n\n            // Define the filter conditions based on the combination of checkboxes\n            let meetsFilterConditions = true;\n            if (isFollowed) {\n                meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n            }\n            // Check if \"Show Upcoming Vacations\" is checked and the vacation starts in the future\n            if (isUpcoming) {\n                meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n            }\n            // Check if \"Show Active Vacations\" is checked and the vacation is currently active\n            if (isActive) {\n                meetsFilterConditions =\n                    meetsFilterConditions &&\n                    vacationStartDate <= currentDate &&\n                    vacationEndDate >= currentDate;\n            }\n            // Return true if the vacation meets all filter conditions, otherwise false\n            return meetsFilterConditions;\n        });\n\n        // Update the checkbox states and filtered vacations\n        setShowFollowed(newShowFollowed);\n        setShowUpcoming(newShowUpcoming);\n        setShowActive(newShowActive);\n        setFilteredVacations(filteredVacationsByCheckbox);\n        setCurrentPage(1);\n    };\n\n    const currentVacations = filteredVacations.slice(\n        indexOfFirstVacation,\n        indexOfLastVacation\n    );\n\n    // Function to handle deleting a vacation\n    const handleDeleteVacation = async (vacationId: number) => {\n        try {\n            // Display a confirmation dialog\n            const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n            if (!confirmed) {\n                // The user canceled the deletion\n                return;\n            }\n\n            // Call the deleteVacation function from the vacationsService\n            await vacationsService.deleteVacation(vacationId);\n\n            // Update the frontendVacations state by filtering out the deleted vacation\n            setFrontendVacations((prevVacations) =>\n                prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n            );\n\n            notifyService.success(\"The vacation has been successfully deleted\");\n\n            // Trigger a re-render by updating vacationDeleted\n            setVacationDeleted((prevValue) => !prevValue);\n\n        } catch (error) {\n            console.error(\"Error deleting vacation:\", error);\n        }\n    };\n\n    // Function to handle downloading the CSV\n    function handleDownloadCSV() {\n        // Generate a timestamp for the current date and time\n        const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n\n        // Create a filename with the timestamp\n        const filename = `vacations_${timestamp}.csv`;\n\n        // Convert the filteredVacations data to CSV format\n        const csvData = convertToCSV(filteredVacations);\n\n        // Create a Blob object with the CSV data\n        const blob = new Blob([csvData], { type: \"text/csv\" });\n\n        // Create a temporary URL for the Blob\n        const url = window.URL.createObjectURL(blob);\n\n        // Create an anchor element for the download\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = filename; // Use the filename with the timestamp\n\n        // Trigger a click event to start the download\n        a.click();\n\n        // Clean up by revoking the Blob URL\n        window.URL.revokeObjectURL(url);\n    }\n\n    return (\n        <div className=\"List\">\n            {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n            <br></br>\n            {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n            <div>\n                {user && user.roleId === RoleModel.Admin && (\n                    <button\n                        onClick={handleDownloadCSV}\n                        className=\"btn btn-primary\"\n                    >Download CSV file</button>\n                )}\n            </div>\n\n            {user && user.roleId === RoleModel.User &&\n                <div >\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showFollowed\"\n                            checked={showFollowed}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Followed Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showUpcoming\"\n                            checked={showUpcoming}\n                            disabled={showActive}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Upcoming Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showActive\"\n                            checked={showActive}\n                            disabled={showUpcoming}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Active Vacations\n                    </label>\n                </div>\n            }\n            <div className=\"pagination\">\n                {filteredVacations.length > 0 && (\n                    <>\n                        <button\n                            onClick={() => handlePageChange(currentPage - 1)}\n                            disabled={currentPage === 1}\n                        >\n                            Previous\n                        </button>\n                        {Array.from({ length: totalPages }, (_, i) => (\n                            <button\n                                key={i}\n                                onClick={() => handlePageChange(i + 1)}\n                                className={currentPage === i + 1 ? \"active\" : \"\"}\n                            >\n                                {i + 1}\n                            </button>\n                        ))}\n                        <button\n                            onClick={() => handlePageChange(currentPage + 1)}\n                            disabled={currentPage === totalPages}\n                        >\n                            Next\n                        </button>\n                    </>\n                )}\n            </div>\n\n            <h2>Our Vacations</h2>\n            \n            {currentVacations.map((vacation) => (\n                <VacationCard\n                    key={vacation.vacationId}\n                    vacation={vacation}\n                    userId={user.userId}\n                    followersCount={vacation.followersCount}\n                    user={user}\n                    onDelete={handleDeleteVacation}\n                    onUpdateVacations={handleUpdateVacations}\n                />\n\n            ))}\n            <div className=\"pagination\">\n                <button\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                >\n                    Previous\n                </button>\n                {Array.from({ length: totalPages }, (_, i) => (\n                    <button\n                        key={i}\n                        onClick={() => handlePageChange(i + 1)}\n                        className={currentPage === i + 1 ? \"active\" : \"\"}\n                    >\n                        {i + 1}\n                    </button>\n                ))}\n                <button\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                >\n                    Next\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ListVacation;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}