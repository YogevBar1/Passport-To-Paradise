{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Passport To Paradise\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\InsertVacation\\\\InsertVacation.tsx\",\n  _s = $RefreshSig$();\n// import { useForm } from \"react-hook-form\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import \"./InsertVacation.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import { useEffect, useState } from \"react\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// /**\n//  * The `InsertVacation` component enables administrators to add new vacation details.\n//  * Administrators can input the destination, description, start and end dates, price,\n//  * and select an image for the new vacation. The component validates the vacation data\n//  * and sends a POST request to create the vacation on the server.\n//  */\n// function InsertVacation(): JSX.Element {\n\n//     // Initialize the form handling with react-hook-form\n//     const { register, handleSubmit, watch } = useForm<VacationModel>();\n//     const navigate = useNavigate();\n\n//     // State to manage image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to track if a new image is selected\n//     const [newImageSelected, setNewImageSelected] = useState<boolean>(false);\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n//     }, [navigate]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         // Get the selected image file from the input element\n//         const imageFile = e.target.files?.[0];\n\n//         // Check if an image file was selected\n//         if (imageFile) {\n//             // Set the selected image file in the state\n//             setSelectedImage(imageFile);\n\n//             // Indicate that a new image has been selected\n//             setNewImageSelected(true);\n\n//             // Create a FileReader to read the image file\n//             const reader = new FileReader();\n\n//             // When the FileReader finishes reading the file, this event handler is called\n//             reader.onload = () => {\n//                 // Set the image preview when the file is loaded\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n\n//             // Read the selected image file as a data URL (base64 encoded)\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     // Function to handle form submission\n//     const send = async (vacation: VacationModel) => {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n\n//             // Trim the values to remove leading and trailing spaces\n//             vacation.vacationDestination = vacation.vacationDestination.trim();\n//             vacation.vacationDescription = vacation.vacationDescription.trim();\n\n//             // Check if the values consist only of spaces or are empty\n//             if (vacation.vacationDestination === \"\" || vacation.vacationDescription === \"\") {\n//                 notifyService.error(\"Vacation destination and description cannot be empty or consist only of spaces.\");\n//                 return;\n//             }\n\n//             // Check if the value consists of a single regular character followed by spaces\n//             if (/^[^\\s][\\s]*$/.test(vacation.vacationDestination) || /^[^\\s][\\s]*$/.test(vacation.vacationDescription)) {\n//                 notifyService.error(\"Vacation destination and description cannot start with a regular character followed by spaces.\");\n//                 return;\n//             }\n\n//             // Check if a new image was selected\n//             vacation.image = newImageSelected ? (selectedImage as File) : undefined;\n\n//             // Send a POST request to add the vacation\n//             await vacationsService.addVacation(vacation);\n//             notifyService.success(\"Vacation has been added\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     };\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n\n//     return (\n//         <div className=\"AddVacation\">\n//             <h2>Add Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <textarea\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                     rows={8}\n//                     style={{ resize: \"none\" }} // Disable textarea resizing\n\n//                 />\n\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     min={new Date().toISOString().split(\"T\")[0]}\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={\n//                         selectedStartDate\n//                             ? new Date(selectedStartDate).toISOString().split(\"T\")[0]\n//                             : new Date().toISOString().split(\"T\")[0]\n//                     }\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"0\"\n//                     max=\"9999.99\"\n//                 />\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange}\n//                 />\n\n//                 {/* Display the image preview only when a new image has been selected */}\n//                 {newImageSelected && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Selected Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Selected Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() =>\n//                                 console.log(\"Image failed to load: \" + currentImagePreview)\n//                             }\n//                         />\n//                     </div>\n//                 )}\n//                 <button className=\"btn btn-primary\">Add Vacation</button>\n\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default InsertVacation;\n\nimport { useForm } from \"react-hook-form\";\nimport \"./InsertVacation.css\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport { useEffect, useState } from \"react\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport { useDispatch } from \"react-redux\";\nimport { VacationsActionType } from \"../../../Redux/VacationState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertVacation() {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue\n  } = useForm();\n  const navigate = useNavigate();\n  const {\n    vacationId\n  } = useParams();\n  const [currentImagePreview, setCurrentImagePreview] = useState(\"\");\n  const [newImageSelected, setNewImageSelected] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [vacationAdded, setVacationAdded] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const token = authStore.getState().token;\n    if (!token) {\n      notifyService.error(\"Please Login\");\n      navigate(\"/login\");\n      return;\n    }\n    const role = authStore.getState().user.roleId;\n    if (role !== RoleModel.Admin) {\n      notifyService.error(\"You don't have access to this page\");\n      navigate(\"/home\");\n    }\n    if (vacationId) {\n      vacationsService.getVacationById(vacationId).then(editedVacation => {\n        for (const key in editedVacation) {\n          setValue(key, editedVacation[key]);\n        }\n        if (editedVacation.image) {\n          setCurrentImagePreview(editedVacation.image);\n          setSelectedImage(null);\n        } else {\n          setCurrentImagePreview(undefined);\n          setSelectedImage(null);\n        }\n      }).catch(err => {\n        console.error(\"Error fetching vacation data for editing:\", err);\n        notifyService.error(\"Failed to fetch vacation data for editing\");\n      });\n    }\n  }, [navigate, vacationId, setValue]);\n  useEffect(() => {\n    if (vacationAdded) {\n      // If a vacation was added, reset the form and image preview\n      // You can reset the form values and image preview state here if needed\n      setVacationAdded(false); // Reset the flag\n    }\n  }, [vacationAdded]);\n  const handleImageChange = e => {\n    var _e$target$files;\n    const imageFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (imageFile) {\n      setSelectedImage(imageFile);\n      setNewImageSelected(true);\n      const reader = new FileReader();\n      reader.onload = () => {\n        setCurrentImagePreview(reader.result);\n      };\n      reader.readAsDataURL(imageFile);\n    }\n  };\n  const send = async vacation => {\n    try {\n      if (vacation.vacationStartDate > vacation.vacationEndDate) {\n        notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n        return;\n      }\n      vacation.vacationDestination = vacation.vacationDestination.trim();\n      vacation.vacationDescription = vacation.vacationDescription.trim();\n      if (vacation.vacationDestination === \"\" || vacation.vacationDescription === \"\") {\n        notifyService.error(\"Vacation destination and description cannot be empty or consist only of spaces.\");\n        return;\n      }\n      if (/^[^\\s][\\s]*$/.test(vacation.vacationDestination) || /^[^\\s][\\s]*$/.test(vacation.vacationDescription)) {\n        notifyService.error(\"Vacation destination and description cannot start with a regular character followed by spaces.\");\n        return;\n      }\n      vacation.image = newImageSelected ? selectedImage : undefined;\n      const addedVacation = await vacationsService.addVacation(vacation);\n      notifyService.success(\"Vacation has been added\");\n\n      // Dispatch the added vacation to Redux\n      dispatch({\n        type: VacationsActionType.AddVacation,\n        payload: addedVacation\n      });\n      setVacationAdded(true);\n      navigate(\"/vacations\");\n    } catch (err) {\n      notifyService.error(err);\n    }\n  };\n  const selectedStartDate = watch(\"vacationStartDate\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AddVacation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Vacation:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(send),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Destination:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...register(\"vacationDestination\"),\n        required: true,\n        minLength: 2,\n        maxLength: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ...register(\"vacationDescription\"),\n        required: true,\n        minLength: 2,\n        maxLength: 250,\n        rows: 8,\n        style: {\n          resize: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Start Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        ...register(\"vacationStartDate\"),\n        min: new Date().toISOString().split(\"T\")[0],\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation End Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        ...register(\"vacationEndDate\"),\n        min: selectedStartDate ? new Date(selectedStartDate).toISOString().split(\"T\")[0] : new Date().toISOString().split(\"T\")[0],\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Price: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        ...register(\"vacationPrice\"),\n        required: true,\n        min: \"0\",\n        max: \"9999.99\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Image: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ...register(\"image\"),\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), newImageSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Selected Image Preview:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentImagePreview,\n          alt: \"Selected Vacation\",\n          onLoad: () => console.log(\"Image loaded successfully\"),\n          onError: () => console.log(\"Image failed to load: \" + currentImagePreview)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Add Vacation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n}\n_s(InsertVacation, \"fRiRWnCSmgO3s/OitxGHmNhJDRQ=\", false, function () {\n  return [useForm, useNavigate, useParams, useDispatch];\n});\n_c = InsertVacation;\nexport default InsertVacation;\nvar _c;\n$RefreshReg$(_c, \"InsertVacation\");","map":{"version":3,"names":["useForm","useNavigate","useParams","notifyService","vacationsService","useEffect","useState","authStore","RoleModel","useDispatch","VacationsActionType","jsxDEV","_jsxDEV","InsertVacation","_s","register","handleSubmit","watch","setValue","navigate","vacationId","currentImagePreview","setCurrentImagePreview","newImageSelected","setNewImageSelected","selectedImage","setSelectedImage","vacationAdded","setVacationAdded","dispatch","token","getState","error","role","user","roleId","Admin","getVacationById","then","editedVacation","key","image","undefined","catch","err","console","handleImageChange","e","_e$target$files","imageFile","target","files","reader","FileReader","onload","result","readAsDataURL","send","vacation","vacationStartDate","vacationEndDate","vacationDestination","trim","vacationDescription","test","addedVacation","addVacation","success","type","AddVacation","payload","selectedStartDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","required","minLength","maxLength","rows","style","resize","min","Date","toISOString","split","step","max","accept","onChange","src","alt","onLoad","log","onError","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Components/VacationArea/InsertVacation/InsertVacation.tsx"],"sourcesContent":["// import { useForm } from \"react-hook-form\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import \"./InsertVacation.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import { useEffect, useState } from \"react\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// /**\n//  * The `InsertVacation` component enables administrators to add new vacation details.\n//  * Administrators can input the destination, description, start and end dates, price,\n//  * and select an image for the new vacation. The component validates the vacation data\n//  * and sends a POST request to create the vacation on the server.\n//  */\n// function InsertVacation(): JSX.Element {\n\n//     // Initialize the form handling with react-hook-form\n//     const { register, handleSubmit, watch } = useForm<VacationModel>();\n//     const navigate = useNavigate();\n\n//     // State to manage image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to track if a new image is selected\n//     const [newImageSelected, setNewImageSelected] = useState<boolean>(false);\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n//     }, [navigate]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         // Get the selected image file from the input element\n//         const imageFile = e.target.files?.[0];\n\n//         // Check if an image file was selected\n//         if (imageFile) {\n//             // Set the selected image file in the state\n//             setSelectedImage(imageFile);\n\n//             // Indicate that a new image has been selected\n//             setNewImageSelected(true);\n\n//             // Create a FileReader to read the image file\n//             const reader = new FileReader();\n\n//             // When the FileReader finishes reading the file, this event handler is called\n//             reader.onload = () => {\n//                 // Set the image preview when the file is loaded\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n\n//             // Read the selected image file as a data URL (base64 encoded)\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     // Function to handle form submission\n//     const send = async (vacation: VacationModel) => {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n\n//             // Trim the values to remove leading and trailing spaces\n//             vacation.vacationDestination = vacation.vacationDestination.trim();\n//             vacation.vacationDescription = vacation.vacationDescription.trim();\n\n//             // Check if the values consist only of spaces or are empty\n//             if (vacation.vacationDestination === \"\" || vacation.vacationDescription === \"\") {\n//                 notifyService.error(\"Vacation destination and description cannot be empty or consist only of spaces.\");\n//                 return;\n//             }\n\n//             // Check if the value consists of a single regular character followed by spaces\n//             if (/^[^\\s][\\s]*$/.test(vacation.vacationDestination) || /^[^\\s][\\s]*$/.test(vacation.vacationDescription)) {\n//                 notifyService.error(\"Vacation destination and description cannot start with a regular character followed by spaces.\");\n//                 return;\n//             }\n\n//             // Check if a new image was selected\n//             vacation.image = newImageSelected ? (selectedImage as File) : undefined;\n\n//             // Send a POST request to add the vacation\n//             await vacationsService.addVacation(vacation);\n//             notifyService.success(\"Vacation has been added\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     };\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n\n//     return (\n//         <div className=\"AddVacation\">\n//             <h2>Add Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <textarea\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                     rows={8}\n//                     style={{ resize: \"none\" }} // Disable textarea resizing\n\n//                 />\n\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     min={new Date().toISOString().split(\"T\")[0]}\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={\n//                         selectedStartDate\n//                             ? new Date(selectedStartDate).toISOString().split(\"T\")[0]\n//                             : new Date().toISOString().split(\"T\")[0]\n//                     }\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"0\"\n//                     max=\"9999.99\"\n//                 />\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange}\n//                 />\n\n//                 {/* Display the image preview only when a new image has been selected */}\n//                 {newImageSelected && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Selected Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Selected Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() =>\n//                                 console.log(\"Image failed to load: \" + currentImagePreview)\n//                             }\n//                         />\n//                     </div>\n//                 )}\n//                 <button className=\"btn btn-primary\">Add Vacation</button>\n\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default InsertVacation;\n\n\nimport { useForm } from \"react-hook-form\";\nimport VacationModel from \"../../../Models/VacationModel\";\nimport \"./InsertVacation.css\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport { useEffect, useState } from \"react\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport { useDispatch } from \"react-redux\";\nimport { VacationsActionType } from \"../../../Redux/VacationState\";\n\nfunction InsertVacation(): JSX.Element {\n    const { register, handleSubmit, watch, setValue } = useForm<VacationModel>();\n    const navigate = useNavigate();\n    const { vacationId } = useParams();\n\n    const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n    const [newImageSelected, setNewImageSelected] = useState<boolean>(false);\n    const [selectedImage, setSelectedImage] = useState<File | null>(null);\n    const [vacationAdded, setVacationAdded] = useState<boolean>(false);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const token = authStore.getState().token;\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        const role = authStore.getState().user.roleId;\n        if (role !== RoleModel.Admin) {\n            notifyService.error(\"You don't have access to this page\");\n            navigate(\"/home\");\n        }\n\n        if (vacationId) {\n            vacationsService\n                .getVacationById(vacationId)\n                .then((editedVacation) => {\n                    for (const key in editedVacation) {\n                        setValue(key, editedVacation[key]);\n                    }\n\n                    if (editedVacation.image) {\n                        setCurrentImagePreview(editedVacation.image);\n                        setSelectedImage(null);\n                    } else {\n                        setCurrentImagePreview(undefined);\n                        setSelectedImage(null);\n                    }\n                })\n                .catch((err) => {\n                    console.error(\"Error fetching vacation data for editing:\", err);\n                    notifyService.error(\"Failed to fetch vacation data for editing\");\n                });\n        }\n    }, [navigate, vacationId, setValue]);\n\n    useEffect(() => {\n        if (vacationAdded) {\n            // If a vacation was added, reset the form and image preview\n            // You can reset the form values and image preview state here if needed\n            setVacationAdded(false); // Reset the flag\n        }\n    }, [vacationAdded]);\n\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const imageFile = e.target.files?.[0];\n\n        if (imageFile) {\n            setSelectedImage(imageFile);\n            setNewImageSelected(true);\n\n            const reader = new FileReader();\n            reader.onload = () => {\n                setCurrentImagePreview(reader.result as string);\n            };\n\n            reader.readAsDataURL(imageFile);\n        }\n    };\n\n    const send = async (vacation: VacationModel) => {\n        try {\n            if (vacation.vacationStartDate > vacation.vacationEndDate) {\n                notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n                return;\n            }\n\n            vacation.vacationDestination = vacation.vacationDestination.trim();\n            vacation.vacationDescription = vacation.vacationDescription.trim();\n\n            if (vacation.vacationDestination === \"\" || vacation.vacationDescription === \"\") {\n                notifyService.error(\"Vacation destination and description cannot be empty or consist only of spaces.\");\n                return;\n            }\n\n            if (/^[^\\s][\\s]*$/.test(vacation.vacationDestination) || /^[^\\s][\\s]*$/.test(vacation.vacationDescription)) {\n                notifyService.error(\"Vacation destination and description cannot start with a regular character followed by spaces.\");\n                return;\n            }\n\n            vacation.image = newImageSelected ? (selectedImage as File) : undefined;\n\n            const addedVacation = await vacationsService.addVacation(vacation);\n            notifyService.success(\"Vacation has been added\");\n\n            // Dispatch the added vacation to Redux\n            dispatch({\n                type: VacationsActionType.AddVacation,\n                payload: addedVacation,\n            });\n\n            setVacationAdded(true);\n\n            navigate(\"/vacations\");\n        } catch (err: any) {\n            notifyService.error(err);\n        }\n    };\n\n    const selectedStartDate = watch(\"vacationStartDate\");\n\n    return (\n        <div className=\"AddVacation\">\n            <h2>Add Vacation:</h2>\n            <form onSubmit={handleSubmit(send)}>\n                <label>Vacation Destination:</label>\n                <input\n                    type=\"text\"\n                    {...register(\"vacationDestination\")}\n                    required\n                    minLength={2}\n                    maxLength={50}\n                />\n                <label>Vacation Description:</label>\n                <textarea\n                    {...register(\"vacationDescription\")}\n                    required\n                    minLength={2}\n                    maxLength={250}\n                    rows={8}\n                    style={{ resize: \"none\" }}\n                />\n\n                <label>Vacation Start Date: </label>\n                <input\n                    type=\"date\"\n                    {...register(\"vacationStartDate\")}\n                    min={new Date().toISOString().split(\"T\")[0]}\n                    required\n                />\n                <label>Vacation End Date: </label>\n                <input\n                    type=\"date\"\n                    {...register(\"vacationEndDate\")}\n                    min={\n                        selectedStartDate\n                            ? new Date(selectedStartDate).toISOString().split(\"T\")[0]\n                            : new Date().toISOString().split(\"T\")[0]\n                    }\n                    required\n                />\n                <label>Price: </label>\n                <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...register(\"vacationPrice\")}\n                    required\n                    min=\"0\"\n                    max=\"9999.99\"\n                />\n                <label>Image: </label>\n                <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    {...register(\"image\")}\n                    onChange={handleImageChange}\n                />\n\n                {newImageSelected && (\n                    <div className=\"current-image-preview\">\n                        <p>Selected Image Preview:</p>\n                        <img\n                            src={currentImagePreview}\n                            alt=\"Selected Vacation\"\n                            onLoad={() => console.log(\"Image loaded successfully\")}\n                            onError={() => console.log(\"Image failed to load: \" + currentImagePreview)}\n                        />\n                    </div>\n                )}\n                <button className=\"btn btn-primary\">Add Vacation</button>\n            </form>\n        </div>\n    );\n}\n\nexport default InsertVacation;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,OAAO,QAAQ,iBAAiB;AAEzC,OAAO,sBAAsB;AAC7B,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,mBAAmB,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,SAASC,cAAcA,CAAA,EAAgB;EAAAC,EAAA;EACnC,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGlB,OAAO,EAAiB;EAC5E,MAAMmB,QAAQ,GAAGlB,WAAW,EAAE;EAC9B,MAAM;IAAEmB;EAAW,CAAC,GAAGlB,SAAS,EAAE;EAElC,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAqB,EAAE,CAAC;EACtF,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAU,KAAK,CAAC;EACxE,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAc,IAAI,CAAC;EACrE,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAU,KAAK,CAAC;EAElE,MAAMuB,QAAQ,GAAGpB,WAAW,EAAE;EAE9BJ,SAAS,CAAC,MAAM;IACZ,MAAMyB,KAAK,GAAGvB,SAAS,CAACwB,QAAQ,EAAE,CAACD,KAAK;IACxC,IAAI,CAACA,KAAK,EAAE;MACR3B,aAAa,CAAC6B,KAAK,CAAC,cAAc,CAAC;MACnCb,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACJ;IAEA,MAAMc,IAAI,GAAG1B,SAAS,CAACwB,QAAQ,EAAE,CAACG,IAAI,CAACC,MAAM;IAC7C,IAAIF,IAAI,KAAKzB,SAAS,CAAC4B,KAAK,EAAE;MAC1BjC,aAAa,CAAC6B,KAAK,CAAC,oCAAoC,CAAC;MACzDb,QAAQ,CAAC,OAAO,CAAC;IACrB;IAEA,IAAIC,UAAU,EAAE;MACZhB,gBAAgB,CACXiC,eAAe,CAACjB,UAAU,CAAC,CAC3BkB,IAAI,CAAEC,cAAc,IAAK;QACtB,KAAK,MAAMC,GAAG,IAAID,cAAc,EAAE;UAC9BrB,QAAQ,CAACsB,GAAG,EAAED,cAAc,CAACC,GAAG,CAAC,CAAC;QACtC;QAEA,IAAID,cAAc,CAACE,KAAK,EAAE;UACtBnB,sBAAsB,CAACiB,cAAc,CAACE,KAAK,CAAC;UAC5Cf,gBAAgB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACHJ,sBAAsB,CAACoB,SAAS,CAAC;UACjChB,gBAAgB,CAAC,IAAI,CAAC;QAC1B;MACJ,CAAC,CAAC,CACDiB,KAAK,CAAEC,GAAG,IAAK;QACZC,OAAO,CAACb,KAAK,CAAC,2CAA2C,EAAEY,GAAG,CAAC;QAC/DzC,aAAa,CAAC6B,KAAK,CAAC,2CAA2C,CAAC;MACpE,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAACb,QAAQ,EAAEC,UAAU,EAAEF,QAAQ,CAAC,CAAC;EAEpCb,SAAS,CAAC,MAAM;IACZ,IAAIsB,aAAa,EAAE;MACf;MACA;MACAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EAEnB,MAAMmB,iBAAiB,GAAIC,CAAsC,IAAK;IAAA,IAAAC,eAAA;IAClE,MAAMC,SAAS,IAAAD,eAAA,GAAGD,CAAC,CAACG,MAAM,CAACC,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IAErC,IAAIC,SAAS,EAAE;MACXvB,gBAAgB,CAACuB,SAAS,CAAC;MAC3BzB,mBAAmB,CAAC,IAAI,CAAC;MAEzB,MAAM4B,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAM;QAClBhC,sBAAsB,CAAC8B,MAAM,CAACG,MAAM,CAAW;MACnD,CAAC;MAEDH,MAAM,CAACI,aAAa,CAACP,SAAS,CAAC;IACnC;EACJ,CAAC;EAED,MAAMQ,IAAI,GAAG,MAAOC,QAAuB,IAAK;IAC5C,IAAI;MACA,IAAIA,QAAQ,CAACC,iBAAiB,GAAGD,QAAQ,CAACE,eAAe,EAAE;QACvDzD,aAAa,CAAC6B,KAAK,CAAC,4EAA4E,CAAC;QACjG;MACJ;MAEA0B,QAAQ,CAACG,mBAAmB,GAAGH,QAAQ,CAACG,mBAAmB,CAACC,IAAI,EAAE;MAClEJ,QAAQ,CAACK,mBAAmB,GAAGL,QAAQ,CAACK,mBAAmB,CAACD,IAAI,EAAE;MAElE,IAAIJ,QAAQ,CAACG,mBAAmB,KAAK,EAAE,IAAIH,QAAQ,CAACK,mBAAmB,KAAK,EAAE,EAAE;QAC5E5D,aAAa,CAAC6B,KAAK,CAAC,iFAAiF,CAAC;QACtG;MACJ;MAEA,IAAI,cAAc,CAACgC,IAAI,CAACN,QAAQ,CAACG,mBAAmB,CAAC,IAAI,cAAc,CAACG,IAAI,CAACN,QAAQ,CAACK,mBAAmB,CAAC,EAAE;QACxG5D,aAAa,CAAC6B,KAAK,CAAC,gGAAgG,CAAC;QACrH;MACJ;MAEA0B,QAAQ,CAACjB,KAAK,GAAGlB,gBAAgB,GAAIE,aAAa,GAAYiB,SAAS;MAEvE,MAAMuB,aAAa,GAAG,MAAM7D,gBAAgB,CAAC8D,WAAW,CAACR,QAAQ,CAAC;MAClEvD,aAAa,CAACgE,OAAO,CAAC,yBAAyB,CAAC;;MAEhD;MACAtC,QAAQ,CAAC;QACLuC,IAAI,EAAE1D,mBAAmB,CAAC2D,WAAW;QACrCC,OAAO,EAAEL;MACb,CAAC,CAAC;MAEFrC,gBAAgB,CAAC,IAAI,CAAC;MAEtBT,QAAQ,CAAC,YAAY,CAAC;IAC1B,CAAC,CAAC,OAAOyB,GAAQ,EAAE;MACfzC,aAAa,CAAC6B,KAAK,CAACY,GAAG,CAAC;IAC5B;EACJ,CAAC;EAED,MAAM2B,iBAAiB,GAAGtD,KAAK,CAAC,mBAAmB,CAAC;EAEpD,oBACIL,OAAA;IAAK4D,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxB7D,OAAA;MAAA6D,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACtBjE,OAAA;MAAMkE,QAAQ,EAAE9D,YAAY,CAACyC,IAAI,CAAE;MAAAgB,QAAA,gBAC/B7D,OAAA;QAAA6D,QAAA,EAAO;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACpCjE,OAAA;QACIwD,IAAI,EAAC,MAAM;QAAA,GACPrD,QAAQ,CAAC,qBAAqB,CAAC;QACnCgE,QAAQ;QACRC,SAAS,EAAE,CAAE;QACbC,SAAS,EAAE;MAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAChB,eACFjE,OAAA;QAAA6D,QAAA,EAAO;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACpCjE,OAAA;QAAA,GACQG,QAAQ,CAAC,qBAAqB,CAAC;QACnCgE,QAAQ;QACRC,SAAS,EAAE,CAAE;QACbC,SAAS,EAAE,GAAI;QACfC,IAAI,EAAE,CAAE;QACRC,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC5B,eAEFjE,OAAA;QAAA6D,QAAA,EAAO;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACpCjE,OAAA;QACIwD,IAAI,EAAC,MAAM;QAAA,GACPrD,QAAQ,CAAC,mBAAmB,CAAC;QACjCsE,GAAG,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE;QAC5CT,QAAQ;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACV,eACFjE,OAAA;QAAA6D,QAAA,EAAO;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eAClCjE,OAAA;QACIwD,IAAI,EAAC,MAAM;QAAA,GACPrD,QAAQ,CAAC,iBAAiB,CAAC;QAC/BsE,GAAG,EACCd,iBAAiB,GACX,IAAIe,IAAI,CAACf,iBAAiB,CAAC,CAACgB,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GACvD,IAAIF,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAC9C;QACDT,QAAQ;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACV,eACFjE,OAAA;QAAA6D,QAAA,EAAO;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACtBjE,OAAA;QACIwD,IAAI,EAAC,QAAQ;QACbqB,IAAI,EAAC,MAAM;QAAA,GACP1E,QAAQ,CAAC,eAAe,CAAC;QAC7BgE,QAAQ;QACRM,GAAG,EAAC,GAAG;QACPK,GAAG,EAAC;MAAS;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACf,eACFjE,OAAA;QAAA6D,QAAA,EAAO;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ,eACtBjE,OAAA;QACIwD,IAAI,EAAC,MAAM;QACXuB,MAAM,EAAC,SAAS;QAAA,GACZ5E,QAAQ,CAAC,OAAO,CAAC;QACrB6E,QAAQ,EAAE9C;MAAkB;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC9B,EAEDtD,gBAAgB,iBACbX,OAAA;QAAK4D,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBAClC7D,OAAA;UAAA6D,QAAA,EAAG;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI,eAC9BjE,OAAA;UACIiF,GAAG,EAAExE,mBAAoB;UACzByE,GAAG,EAAC,mBAAmB;UACvBC,MAAM,EAAEA,CAAA,KAAMlD,OAAO,CAACmD,GAAG,CAAC,2BAA2B,CAAE;UACvDC,OAAO,EAAEA,CAAA,KAAMpD,OAAO,CAACmD,GAAG,CAAC,wBAAwB,GAAG3E,mBAAmB;QAAE;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC7E;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAET,eACDjE,OAAA;QAAQ4D,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEd;AAAC/D,EAAA,CA1LQD,cAAc;EAAA,QACiCb,OAAO,EAC1CC,WAAW,EACLC,SAAS,EAOfO,WAAW;AAAA;AAAAyF,EAAA,GAVvBrF,cAAc;AA4LvB,eAAeA,cAAc;AAAC,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}