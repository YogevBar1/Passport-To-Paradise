{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Final Project Vacations\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\ListVacation\\\\ListVacation.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { NavLink, useNavigate } from \"react-router-dom\";\n// import UserModel from \"../../../Models/UserModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import VacationCard from \"../VacationCard/VacationCard\";\n// import \"./ListVacation.css\";\n\n// function ListVacation(): JSX.Element {\n//     const navigate = useNavigate();\n//     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n//         []\n//     );\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const vacationsPerPage = 9;\n//     const [user, setUser] = useState<UserModel>();\n//     const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n//     const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n//     const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n//     const [selectedVacation, setSelectedVacation] = useState<VacationModel | null>(null);\n//     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n//     const [refresh, setRefresh] = useState(false);\n\n//     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n//         []\n//     ); // State to store filtered vacations\n\n//     const [vacationFollow, setVacationFollow] = useState<VacationModel>();\n\n//     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n//         // Update the frontendVacations state\n//         setFrontendVacations((prevVacations) =>\n//             prevVacations.map((vacation) =>\n//                 vacation.vacationId === vacationId\n//                     ? { ...vacation, isFollowing: followed }\n//                     : vacation\n//             )\n//         );\n//     };\n\n//     useEffect(() => {\n//         const loggedUser = authStore.getState().user;\n//         setUser(loggedUser);\n\n//         if (!authStore.getState().user) {\n//             navigate(\"/login\");\n//         }\n\n//         vacationsService\n//             .getFollowedVacations(loggedUser?.userId)\n//             .then(backendVacations => {\n//                 backendVacations.sort(\n//                     (a, b) =>\n//                         new Date(a.vacationStartDate).getTime() -\n//                         new Date(b.vacationStartDate).getTime()\n//                 );\n//                 setFrontendVacations(backendVacations);\n//                 setFilteredVacations(backendVacations); // Initialize filtered vacations with all vacations\n//             })\n//             .catch((err) => notifyService.error(err));\n//     }, [vacationDeleted, vacationFollow, refresh]);\n\n//     // Function to convert data to CSV\n//     function convertToCSV(data: VacationModel[]): string {\n//         const header = \"Followers,Destination\\n\";\n//         const csvData = data.map((item) => `${item.vacationDestination},${item.followersCount}`).join(\"\\n\");\n//         return header + csvData;\n//     }\n\n//     const handlePageChange = (newPage: number) => {\n//         setCurrentPage(newPage);\n//     };\n\n//     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n//     const indexOfLastVacation = currentPage * vacationsPerPage;\n//     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n//     // Function to filter vacations based on the checkbox state\n//     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const { name, checked } = e.target;\n\n//         // Declare currentDate here\n//         const currentDate = new Date();\n\n//         // Handle other checkboxes first\n//         if (name !== \"showFollowed\") {\n//             // Handle other checkboxes here as needed\n//             // For example, you can update other state variables based on their names\n//             if (name === \"showUpcoming\") {\n//                 setShowUpcoming(checked);\n//             } else if (name === \"showActive\") {\n//                 setShowActive(checked);\n//             }\n\n//             // Apply filter based on all checkbox states\n//             const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//                 const isFollowed = showFollowed;\n//                 const isUpcoming = showUpcoming;\n//                 const isActive = showActive;\n\n//                 const vacationStartDate = new Date(vacation.vacationStartDate);\n//                 const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//                 // Define the filter conditions based on the combination of checkboxes\n//                 let meetsFilterConditions = true;\n//                 if (isFollowed) {\n//                     meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//                 }\n//                 if (isUpcoming) {\n//                     meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//                 }\n//                 if (isActive) {\n//                     meetsFilterConditions =\n//                         meetsFilterConditions &&\n//                         vacationStartDate <= currentDate &&\n//                         vacationEndDate >= currentDate;\n//                 }\n\n//                 return meetsFilterConditions;\n//             });\n\n//             // Update the filtered vacations\n//             setFilteredVacations(filteredVacationsByCheckbox);\n//             setCurrentPage(1);\n//         } else {\n//             // If the \"Show Followed Vacations\" checkbox is clicked\n//             setShowFollowed(checked);\n\n//             // Filter the vacations based on whether they are followed\n//             const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//                 const isFollowed = checked;\n//                 const isUpcoming = showUpcoming;\n//                 const isActive = showActive;\n\n//                 const vacationStartDate = new Date(vacation.vacationStartDate);\n//                 const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//                 // Define the filter conditions based on the combination of checkboxes\n//                 let meetsFilterConditions = true;\n//                 if (isFollowed) {\n//                     meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//                 }\n//                 if (isUpcoming) {\n//                     meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//                 }\n//                 if (isActive) {\n//                     meetsFilterConditions =\n//                         meetsFilterConditions &&\n//                         vacationStartDate <= currentDate &&\n//                         vacationEndDate >= currentDate;\n//                 }\n\n//                 return meetsFilterConditions;\n//             });\n\n//             // Update the filtered vacations\n\n//             setFilteredVacations(filteredVacationsByCheckbox);\n//             setCurrentPage(1);\n//         }\n//     };\n\n//     const currentVacations = filteredVacations.slice(\n//         indexOfFirstVacation,\n//         indexOfLastVacation\n//     );\n\n//     // Function to handle deleting a vacation\n//     const handleDeleteVacation = async (vacationId: number) => {\n//         try {\n//             // Display a confirmation dialog\n//             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n//             if (!confirmed) {\n//                 // The user canceled the deletion\n//                 return;\n//             }\n\n//             await vacationsService.deleteVacation(vacationId);\n//             setFrontendVacations((prevVacations) =>\n//                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n//             );\n\n//             notifyService.success(\"The vacation has been successfully deleted\");\n\n//             // Trigger a re-render by updating vacationDeleted\n//             setVacationDeleted((prevValue) => !prevValue);\n\n//         } catch (error) {\n//             console.error(\"Error deleting vacation:\", error);\n//         }\n//     };\n\n//     // Function to handle downloading the CSV\n//     function handleDownloadCSV() {\n//         // Convert the filteredVacations data to CSV format\n//         const csvData = convertToCSV(filteredVacations);\n\n//         // Create a Blob object with the CSV data\n//         const blob = new Blob([csvData], { type: \"text/csv\" });\n\n//         // Create a temporary URL for the Blob\n//         const url = window.URL.createObjectURL(blob);\n\n//         // Create an anchor element for the download\n//         const a = document.createElement(\"a\");\n//         a.href = url;\n//         a.download = \"vacations.csv\";\n\n//         // Trigger a click event to start the download\n//         a.click();\n\n//         // Clean up by revoking the Blob URL\n//         window.URL.revokeObjectURL(url);\n//     }\n\n//     return (\n//         <div className=\"List\">\n//             {user && user.roleId === 1 && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n//             <br></br>\n//             {user && user.roleId === 1 && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n//             <div>\n//                 {user && user.roleId === 1 && (\n//                     <button onClick={handleDownloadCSV}>Download CSV file</button>\n//                 )}\n//             </div>\n\n//             <div>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showFollowed\"\n//                         checked={showFollowed}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Followed Vacations\n//                 </label>\n//                 <br></br>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showUpcoming\"\n//                         checked={showUpcoming}\n//                         disabled={showActive}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Upcoming Vacations\n//                 </label>\n//                 <br></br>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showActive\"\n//                         checked={showActive}\n//                         disabled={showUpcoming}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Active Vacations\n//                 </label>\n//             </div>\n//             <div className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             <h2>Our Vacations</h2>\n//             {currentVacations.map((vacation) => (\n//                 <VacationCard\n//                 key={vacation.vacationId}\n//                 vacation={vacation}\n//                 userId={user.userId}\n//                 followersCount={vacation.followersCount}\n//                 user={user}\n//                 onDelete={handleDeleteVacation}\n//                 onUpdateVacations={handleUpdateVacations}\n\n//                 />\n\n//             ))}\n//             <div className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default ListVacation;\n\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport VacationCard from \"../VacationCard/VacationCard\";\nimport \"./ListVacation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListVacation() {\n  _s();\n  const navigate = useNavigate();\n  const [frontendVacations, setFrontendVacations] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const vacationsPerPage = 9;\n  const [user, setUser] = useState();\n  const [showFollowed, setShowFollowed] = useState(false); // State to track if checkbox is checked\n  const [showUpcoming, setShowUpcoming] = useState(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n  const [showActive, setShowActive] = useState(false); // State to track if \"Show Active Vacations\" checkbox is checked\n  const [selectedVacation, setSelectedVacation] = useState(null);\n  const [vacationDeleted, setVacationDeleted] = useState(false); // Add state to trigger re-render\n  const [refresh, setRefresh] = useState(false);\n  const [filteredVacations, setFilteredVacations] = useState([]); // State to store filtered vacations\n\n  const [vacationFollow, setVacationFollow] = useState();\n  const handleUpdateVacations = (vacationId, followed) => {\n    // Update the frontendVacations state\n    setFrontendVacations(prevVacations => prevVacations.map(vacation => vacation.vacationId === vacationId ? {\n      ...vacation,\n      isFollowing: followed\n    } : vacation));\n  };\n  useEffect(() => {\n    // Check if the user login:\n    const token = authStore.getState().token;\n    if (!token) {\n      notifyService.error(\"Please Login\");\n      navigate(\"/login\");\n      return;\n    }\n    const loggedUser = authStore.getState().user;\n    setUser(loggedUser);\n    vacationsService.getFollowedVacations(loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.userId).then(backendVacations => {\n      backendVacations.sort((a, b) => new Date(a.vacationStartDate).getTime() - new Date(b.vacationStartDate).getTime());\n      setFrontendVacations(backendVacations);\n      setFilteredVacations(backendVacations); // Initialize filtered vacations with all vacations\n    }).catch(err => notifyService.error(err));\n  }, [vacationDeleted, vacationFollow, refresh]);\n\n  // Function to convert data to CSV\n  function convertToCSV(data) {\n    const header = \"Followers,Destination\\n\";\n    // const csvData = data.map((item) => `${item.vacationDestination},${item.followersCount}`).join(\"\\n\");\n    const csvData = data.map(item => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n    return header + csvData;\n  }\n  const handlePageChange = newPage => {\n    setCurrentPage(newPage);\n  };\n  const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n  const indexOfLastVacation = currentPage * vacationsPerPage;\n  const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n  // Function to filter vacations based on the checkbox state\n  const handleCheckboxChange = e => {\n    const {\n      name,\n      checked\n    } = e.target;\n\n    // Create new state variables for each checkbox\n    let newShowFollowed = showFollowed;\n    let newShowUpcoming = showUpcoming;\n    let newShowActive = showActive;\n    if (name === \"showFollowed\") {\n      newShowFollowed = checked;\n    } else if (name === \"showUpcoming\") {\n      newShowUpcoming = checked;\n    } else if (name === \"showActive\") {\n      newShowActive = checked;\n    }\n\n    // Calculate the filtered vacations based on the new checkbox states\n    const currentDate = new Date();\n    const filteredVacationsByCheckbox = frontendVacations.filter(vacation => {\n      const isFollowed = newShowFollowed;\n      const isUpcoming = newShowUpcoming;\n      const isActive = newShowActive;\n      const vacationStartDate = new Date(vacation.vacationStartDate);\n      const vacationEndDate = new Date(vacation.vacationEndDate);\n\n      // Define the filter conditions based on the combination of checkboxes\n      let meetsFilterConditions = true;\n      if (isFollowed) {\n        meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n      }\n      if (isUpcoming) {\n        meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n      }\n      if (isActive) {\n        meetsFilterConditions = meetsFilterConditions && vacationStartDate <= currentDate && vacationEndDate >= currentDate;\n      }\n      return meetsFilterConditions;\n    });\n\n    // Update the checkbox states and filtered vacations\n    setShowFollowed(newShowFollowed);\n    setShowUpcoming(newShowUpcoming);\n    setShowActive(newShowActive);\n    setFilteredVacations(filteredVacationsByCheckbox);\n    setCurrentPage(1);\n  };\n  const currentVacations = filteredVacations.slice(indexOfFirstVacation, indexOfLastVacation);\n\n  // Function to handle deleting a vacation\n  const handleDeleteVacation = async vacationId => {\n    try {\n      // Display a confirmation dialog\n      const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n      if (!confirmed) {\n        // The user canceled the deletion\n        return;\n      }\n      await vacationsService.deleteVacation(vacationId);\n      setFrontendVacations(prevVacations => prevVacations.filter(vacation => vacation.vacationId !== vacationId));\n      notifyService.success(\"The vacation has been successfully deleted\");\n\n      // Trigger a re-render by updating vacationDeleted\n      setVacationDeleted(prevValue => !prevValue);\n    } catch (error) {\n      console.error(\"Error deleting vacation:\", error);\n    }\n  };\n\n  // Function to handle downloading the CSV\n  function handleDownloadCSV() {\n    // Convert the filteredVacations data to CSV format\n    const csvData = convertToCSV(filteredVacations);\n\n    // Create a Blob object with the CSV data\n    const blob = new Blob([csvData], {\n      type: \"text/csv\"\n    });\n\n    // Create a temporary URL for the Blob\n    const url = window.URL.createObjectURL(blob);\n\n    // Create an anchor element for the download\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"vacations.csv\";\n\n    // Trigger a click event to start the download\n    a.click();\n\n    // Clean up by revoking the Blob URL\n    window.URL.revokeObjectURL(url);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"List\",\n    children: [user && user.roleId === 1 && /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/vacations/add\",\n      children: \"Add Vacation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 13\n    }, this), user && user.roleId === 1 && /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/vacations/report\",\n      children: \"Vacation Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 43\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: user && user.roleId === 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownloadCSV,\n        children: \"Download CSV file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 13\n    }, this), user && user.roleId == 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showFollowed\",\n          checked: showFollowed,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 25\n        }, this), \" \", \"Show Followed Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showUpcoming\",\n          checked: showUpcoming,\n          disabled: showActive,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 25\n        }, this), \" \", \"Show Upcoming Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"showActive\",\n          checked: showActive,\n          disabled: showUpcoming,\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 25\n        }, this), \" \", \"Show Active Vacations\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 17\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(i + 1),\n        className: currentPage === i + 1 ? \"active\" : \"\",\n        children: i + 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Our Vacations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 13\n    }, this), currentVacations.map(vacation => /*#__PURE__*/_jsxDEV(VacationCard, {\n      vacation: vacation,\n      userId: user.userId,\n      followersCount: vacation.followersCount,\n      user: user,\n      onDelete: handleDeleteVacation,\n      onUpdateVacations: handleUpdateVacations\n    }, vacation.vacationId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        disabled: currentPage === 1,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 17\n      }, this), Array.from({\n        length: totalPages\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(i + 1),\n        className: currentPage === i + 1 ? \"active\" : \"\",\n        children: i + 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        disabled: currentPage === totalPages,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 548,\n    columnNumber: 9\n  }, this);\n}\n_s(ListVacation, \"6rOT9tpa5G8K9yWZICE1Xt6xxtI=\", false, function () {\n  return [useNavigate];\n});\n_c = ListVacation;\nexport default ListVacation;\nvar _c;\n$RefreshReg$(_c, \"ListVacation\");","map":{"version":3,"names":["React","useEffect","useState","NavLink","useNavigate","authStore","notifyService","vacationsService","VacationCard","jsxDEV","_jsxDEV","ListVacation","_s","navigate","frontendVacations","setFrontendVacations","currentPage","setCurrentPage","vacationsPerPage","user","setUser","showFollowed","setShowFollowed","showUpcoming","setShowUpcoming","showActive","setShowActive","selectedVacation","setSelectedVacation","vacationDeleted","setVacationDeleted","refresh","setRefresh","filteredVacations","setFilteredVacations","vacationFollow","setVacationFollow","handleUpdateVacations","vacationId","followed","prevVacations","map","vacation","isFollowing","token","getState","error","loggedUser","getFollowedVacations","userId","then","backendVacations","sort","a","b","Date","vacationStartDate","getTime","catch","err","convertToCSV","data","header","csvData","item","followersCount","vacationDestination","join","handlePageChange","newPage","totalPages","Math","ceil","length","indexOfLastVacation","indexOfFirstVacation","handleCheckboxChange","e","name","checked","target","newShowFollowed","newShowUpcoming","newShowActive","currentDate","filteredVacationsByCheckbox","filter","isFollowed","isUpcoming","isActive","vacationEndDate","meetsFilterConditions","currentVacations","slice","handleDeleteVacation","confirmed","window","confirm","deleteVacation","success","prevValue","console","handleDownloadCSV","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","className","children","roleId","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","disabled","Array","from","_","i","onDelete","onUpdateVacations","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Final Project Vacations/Frontend/src/Components/VacationArea/ListVacation/ListVacation.tsx"],"sourcesContent":["\n// import React, { useEffect, useState } from \"react\";\n// import { NavLink, useNavigate } from \"react-router-dom\";\n// import UserModel from \"../../../Models/UserModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import VacationCard from \"../VacationCard/VacationCard\";\n// import \"./ListVacation.css\";\n\n// function ListVacation(): JSX.Element {\n//     const navigate = useNavigate();\n//     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n//         []\n//     );\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const vacationsPerPage = 9;\n//     const [user, setUser] = useState<UserModel>();\n//     const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n//     const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n//     const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n//     const [selectedVacation, setSelectedVacation] = useState<VacationModel | null>(null);\n//     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n//     const [refresh, setRefresh] = useState(false);\n\n\n//     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n//         []\n//     ); // State to store filtered vacations\n\n//     const [vacationFollow, setVacationFollow] = useState<VacationModel>();\n\n\n//     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n//         // Update the frontendVacations state\n//         setFrontendVacations((prevVacations) =>\n//             prevVacations.map((vacation) =>\n//                 vacation.vacationId === vacationId\n//                     ? { ...vacation, isFollowing: followed }\n//                     : vacation\n//             )\n//         );\n//     };\n\n\n\n//     useEffect(() => {\n//         const loggedUser = authStore.getState().user;\n//         setUser(loggedUser);\n\n//         if (!authStore.getState().user) {\n//             navigate(\"/login\");\n//         }\n\n//         vacationsService\n//             .getFollowedVacations(loggedUser?.userId)\n//             .then(backendVacations => {\n//                 backendVacations.sort(\n//                     (a, b) =>\n//                         new Date(a.vacationStartDate).getTime() -\n//                         new Date(b.vacationStartDate).getTime()\n//                 );\n//                 setFrontendVacations(backendVacations);\n//                 setFilteredVacations(backendVacations); // Initialize filtered vacations with all vacations\n//             })\n//             .catch((err) => notifyService.error(err));\n//     }, [vacationDeleted, vacationFollow, refresh]);\n\n//     // Function to convert data to CSV\n//     function convertToCSV(data: VacationModel[]): string {\n//         const header = \"Followers,Destination\\n\";\n//         const csvData = data.map((item) => `${item.vacationDestination},${item.followersCount}`).join(\"\\n\");\n//         return header + csvData;\n//     }\n\n\n\n//     const handlePageChange = (newPage: number) => {\n//         setCurrentPage(newPage);\n//     };\n\n//     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n//     const indexOfLastVacation = currentPage * vacationsPerPage;\n//     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n//     // Function to filter vacations based on the checkbox state\n//     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const { name, checked } = e.target;\n\n//         // Declare currentDate here\n//         const currentDate = new Date();\n\n//         // Handle other checkboxes first\n//         if (name !== \"showFollowed\") {\n//             // Handle other checkboxes here as needed\n//             // For example, you can update other state variables based on their names\n//             if (name === \"showUpcoming\") {\n//                 setShowUpcoming(checked);\n//             } else if (name === \"showActive\") {\n//                 setShowActive(checked);\n//             }\n\n//             // Apply filter based on all checkbox states\n//             const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//                 const isFollowed = showFollowed;\n//                 const isUpcoming = showUpcoming;\n//                 const isActive = showActive;\n\n//                 const vacationStartDate = new Date(vacation.vacationStartDate);\n//                 const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//                 // Define the filter conditions based on the combination of checkboxes\n//                 let meetsFilterConditions = true;\n//                 if (isFollowed) {\n//                     meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//                 }\n//                 if (isUpcoming) {\n//                     meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//                 }\n//                 if (isActive) {\n//                     meetsFilterConditions =\n//                         meetsFilterConditions &&\n//                         vacationStartDate <= currentDate &&\n//                         vacationEndDate >= currentDate;\n//                 }\n\n//                 return meetsFilterConditions;\n//             });\n\n//             // Update the filtered vacations\n//             setFilteredVacations(filteredVacationsByCheckbox);\n//             setCurrentPage(1);\n//         } else {\n//             // If the \"Show Followed Vacations\" checkbox is clicked\n//             setShowFollowed(checked);\n\n//             // Filter the vacations based on whether they are followed\n//             const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//                 const isFollowed = checked;\n//                 const isUpcoming = showUpcoming;\n//                 const isActive = showActive;\n\n//                 const vacationStartDate = new Date(vacation.vacationStartDate);\n//                 const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//                 // Define the filter conditions based on the combination of checkboxes\n//                 let meetsFilterConditions = true;\n//                 if (isFollowed) {\n//                     meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//                 }\n//                 if (isUpcoming) {\n//                     meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//                 }\n//                 if (isActive) {\n//                     meetsFilterConditions =\n//                         meetsFilterConditions &&\n//                         vacationStartDate <= currentDate &&\n//                         vacationEndDate >= currentDate;\n//                 }\n\n//                 return meetsFilterConditions;\n//             });\n\n//             // Update the filtered vacations\n\n//             setFilteredVacations(filteredVacationsByCheckbox);\n//             setCurrentPage(1);\n//         }\n//     };\n\n\n\n//     const currentVacations = filteredVacations.slice(\n//         indexOfFirstVacation,\n//         indexOfLastVacation\n//     );\n\n//     // Function to handle deleting a vacation\n//     const handleDeleteVacation = async (vacationId: number) => {\n//         try {\n//             // Display a confirmation dialog\n//             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n//             if (!confirmed) {\n//                 // The user canceled the deletion\n//                 return;\n//             }\n\n//             await vacationsService.deleteVacation(vacationId);\n//             setFrontendVacations((prevVacations) =>\n//                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n//             );\n\n//             notifyService.success(\"The vacation has been successfully deleted\");\n\n//             // Trigger a re-render by updating vacationDeleted\n//             setVacationDeleted((prevValue) => !prevValue);\n\n//         } catch (error) {\n//             console.error(\"Error deleting vacation:\", error);\n//         }\n//     };\n\n//     // Function to handle downloading the CSV\n//     function handleDownloadCSV() {\n//         // Convert the filteredVacations data to CSV format\n//         const csvData = convertToCSV(filteredVacations);\n\n//         // Create a Blob object with the CSV data\n//         const blob = new Blob([csvData], { type: \"text/csv\" });\n\n//         // Create a temporary URL for the Blob\n//         const url = window.URL.createObjectURL(blob);\n\n//         // Create an anchor element for the download\n//         const a = document.createElement(\"a\");\n//         a.href = url;\n//         a.download = \"vacations.csv\";\n\n//         // Trigger a click event to start the download\n//         a.click();\n\n//         // Clean up by revoking the Blob URL\n//         window.URL.revokeObjectURL(url);\n//     }\n\n\n//     return (\n//         <div className=\"List\">\n//             {user && user.roleId === 1 && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n//             <br></br>\n//             {user && user.roleId === 1 && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n//             <div>\n//                 {user && user.roleId === 1 && (\n//                     <button onClick={handleDownloadCSV}>Download CSV file</button>\n//                 )}\n//             </div>\n\n\n//             <div>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showFollowed\"\n//                         checked={showFollowed}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Followed Vacations\n//                 </label>\n//                 <br></br>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showUpcoming\"\n//                         checked={showUpcoming}\n//                         disabled={showActive}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Upcoming Vacations\n//                 </label>\n//                 <br></br>\n//                 <label>\n//                     <input\n//                         type=\"checkbox\"\n//                         name=\"showActive\"\n//                         checked={showActive}\n//                         disabled={showUpcoming}\n//                         onChange={handleCheckboxChange}\n//                     />{\" \"}\n//                     Show Active Vacations\n//                 </label>\n//             </div>\n//             <div className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//             <h2>Our Vacations</h2>\n//             {currentVacations.map((vacation) => (\n//                 <VacationCard\n//                 key={vacation.vacationId}\n//                 vacation={vacation}\n//                 userId={user.userId}\n//                 followersCount={vacation.followersCount}\n//                 user={user}\n//                 onDelete={handleDeleteVacation}\n//                 onUpdateVacations={handleUpdateVacations}\n\n//                 />\n\n//             ))}\n//             <div className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default ListVacation;\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport UserModel from \"../../../Models/UserModel\";\nimport VacationModel from \"../../../Models/VacationModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport VacationCard from \"../VacationCard/VacationCard\";\nimport \"./ListVacation.css\";\n\nfunction ListVacation(): JSX.Element {\n    const navigate = useNavigate();\n    const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n        []\n    );\n    const [currentPage, setCurrentPage] = useState<number>(1);\n    const vacationsPerPage = 9;\n    const [user, setUser] = useState<UserModel>();\n    const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n    const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n    const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n    const [selectedVacation, setSelectedVacation] = useState<VacationModel | null>(null);\n    const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n    const [refresh, setRefresh] = useState(false);\n\n\n    const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n        []\n    ); // State to store filtered vacations\n\n    const [vacationFollow, setVacationFollow] = useState<VacationModel>();\n\n\n    const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n        // Update the frontendVacations state\n        setFrontendVacations((prevVacations) =>\n            prevVacations.map((vacation) =>\n                vacation.vacationId === vacationId\n                    ? { ...vacation, isFollowing: followed }\n                    : vacation\n            )\n        );\n    };\n\n\n\n    useEffect(() => {\n\n        // Check if the user login:\n        const token = authStore.getState().token;\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        const loggedUser = authStore.getState().user;\n        setUser(loggedUser);\n\n\n\n        vacationsService\n            .getFollowedVacations(loggedUser?.userId)\n            .then(backendVacations => {\n                backendVacations.sort(\n                    (a, b) =>\n                        new Date(a.vacationStartDate).getTime() -\n                        new Date(b.vacationStartDate).getTime()\n                );\n                setFrontendVacations(backendVacations);\n                setFilteredVacations(backendVacations); // Initialize filtered vacations with all vacations\n            })\n            .catch((err) => notifyService.error(err));\n    }, [vacationDeleted, vacationFollow, refresh]);\n\n    // Function to convert data to CSV\n    function convertToCSV(data: VacationModel[]): string {\n        const header = \"Followers,Destination\\n\";\n        // const csvData = data.map((item) => `${item.vacationDestination},${item.followersCount}`).join(\"\\n\");\n        const csvData = data.map((item) => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n        return header + csvData;\n    }\n\n\n\n    const handlePageChange = (newPage: number) => {\n        setCurrentPage(newPage);\n    };\n\n    const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n    const indexOfLastVacation = currentPage * vacationsPerPage;\n    const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n    // Function to filter vacations based on the checkbox state\n    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, checked } = e.target;\n\n        // Create new state variables for each checkbox\n        let newShowFollowed = showFollowed;\n        let newShowUpcoming = showUpcoming;\n        let newShowActive = showActive;\n\n        if (name === \"showFollowed\") {\n            newShowFollowed = checked;\n        } else if (name === \"showUpcoming\") {\n            newShowUpcoming = checked;\n        } else if (name === \"showActive\") {\n            newShowActive = checked;\n        }\n\n        // Calculate the filtered vacations based on the new checkbox states\n        const currentDate = new Date();\n        const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n            const isFollowed = newShowFollowed;\n            const isUpcoming = newShowUpcoming;\n            const isActive = newShowActive;\n\n            const vacationStartDate = new Date(vacation.vacationStartDate);\n            const vacationEndDate = new Date(vacation.vacationEndDate);\n\n            // Define the filter conditions based on the combination of checkboxes\n            let meetsFilterConditions = true;\n            if (isFollowed) {\n                meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n            }\n            if (isUpcoming) {\n                meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n            }\n            if (isActive) {\n                meetsFilterConditions =\n                    meetsFilterConditions &&\n                    vacationStartDate <= currentDate &&\n                    vacationEndDate >= currentDate;\n            }\n\n            return meetsFilterConditions;\n        });\n\n        // Update the checkbox states and filtered vacations\n        setShowFollowed(newShowFollowed);\n        setShowUpcoming(newShowUpcoming);\n        setShowActive(newShowActive);\n        setFilteredVacations(filteredVacationsByCheckbox);\n        setCurrentPage(1);\n    };\n\n\n\n\n    const currentVacations = filteredVacations.slice(\n        indexOfFirstVacation,\n        indexOfLastVacation\n    );\n\n    // Function to handle deleting a vacation\n    const handleDeleteVacation = async (vacationId: number) => {\n        try {\n            // Display a confirmation dialog\n            const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n            if (!confirmed) {\n                // The user canceled the deletion\n                return;\n            }\n\n            await vacationsService.deleteVacation(vacationId);\n            setFrontendVacations((prevVacations) =>\n                prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n            );\n\n            notifyService.success(\"The vacation has been successfully deleted\");\n\n            // Trigger a re-render by updating vacationDeleted\n            setVacationDeleted((prevValue) => !prevValue);\n\n        } catch (error) {\n            console.error(\"Error deleting vacation:\", error);\n        }\n    };\n\n    // Function to handle downloading the CSV\n    function handleDownloadCSV() {\n        // Convert the filteredVacations data to CSV format\n        const csvData = convertToCSV(filteredVacations);\n\n        // Create a Blob object with the CSV data\n        const blob = new Blob([csvData], { type: \"text/csv\" });\n\n        // Create a temporary URL for the Blob\n        const url = window.URL.createObjectURL(blob);\n\n        // Create an anchor element for the download\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"vacations.csv\";\n\n        // Trigger a click event to start the download\n        a.click();\n\n        // Clean up by revoking the Blob URL\n        window.URL.revokeObjectURL(url);\n    }\n\n\n    return (\n        <div className=\"List\">\n            {user && user.roleId === 1 && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n            <br></br>\n            {user && user.roleId === 1 && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n            <div>\n                {user && user.roleId === 1 && (\n                    <button onClick={handleDownloadCSV}>Download CSV file</button>\n                )}\n            </div>\n\n            {user && user.roleId == 2 &&\n                <div >\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showFollowed\"\n                            checked={showFollowed}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Followed Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showUpcoming\"\n                            checked={showUpcoming}\n                            disabled={showActive}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Upcoming Vacations\n                    </label>\n                    <br></br>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            name=\"showActive\"\n                            checked={showActive}\n                            disabled={showUpcoming}\n                            onChange={handleCheckboxChange}\n                        />{\" \"}\n                        Show Active Vacations\n                    </label>\n                </div>\n            }\n            <div className=\"pagination\">\n                <button\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                >\n                    Previous\n                </button>\n                {Array.from({ length: totalPages }, (_, i) => (\n                    <button\n                        key={i}\n                        onClick={() => handlePageChange(i + 1)}\n                        className={currentPage === i + 1 ? \"active\" : \"\"}\n                    >\n                        {i + 1}\n                    </button>\n                ))}\n                <button\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                >\n                    Next\n                </button>\n            </div>\n            <h2>Our Vacations</h2>\n            {currentVacations.map((vacation) => (\n                <VacationCard\n                    key={vacation.vacationId}\n                    vacation={vacation}\n                    userId={user.userId}\n                    followersCount={vacation.followersCount}\n                    user={user}\n                    onDelete={handleDeleteVacation}\n                    onUpdateVacations={handleUpdateVacations}\n\n                />\n\n            ))}\n            <div className=\"pagination\">\n                <button\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                >\n                    Previous\n                </button>\n                {Array.from({ length: totalPages }, (_, i) => (\n                    <button\n                        key={i}\n                        onClick={() => handlePageChange(i + 1)}\n                        className={currentPage === i + 1 ? \"active\" : \"\"}\n                    >\n                        {i + 1}\n                    </button>\n                ))}\n                <button\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                >\n                    Next\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ListVacation;\n\n\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}