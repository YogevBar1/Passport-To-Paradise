{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Passport To Paradise\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\EditVacation\\\\EditVacation.tsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import RoleModel from \"../../../Models/RoleModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import \"./EditVacation.css\";\n\n// /**\n//  * The `EditVacation` component allows administrators to edit an existing vacation's details.\n//  * Administrators can modify the vacation's destination, description, start and end dates, price,\n//  * and select a new image for the vacation. The component ensures that the new vacation data\n//  * is valid and makes a PUT request to update the vacation on the server.\n//  */\n// function EditVacation(): JSX.Element {\n//     // Initialize react-hook-form\n//     const { watch } = useForm<VacationModel>();\n//     const { register, handleSubmit, setValue } = useForm<VacationModel>();\n\n//     // State for image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     // Get the navigation function\n//     const navigate = useNavigate();\n//     // Get the vacationId from the URL params\n//     const params = useParams();\n//     const vacationId = +params.vacationId;\n\n//     // UseEffect to fetch and set initial values\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n\n//         // Fetch the vacation data for editing\n//         vacationsService.getOneVacation(vacationId)\n//             .then(backendVacation => {\n//                 // Set form fields with the fetched data\n//                 setValue(\"vacationDestination\", backendVacation.vacationDestination);\n//                 setValue(\"vacationDescription\", backendVacation.vacationDescription);\n//                 setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationPrice\", backendVacation.vacationPrice);\n\n//                 // Set the image URL for preview\n//                 setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n//             })\n//             .catch(err => notifyService.error(err));\n//     }, [vacationId, setValue]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const imageFile = e.target.files?.[0];\n//         if (imageFile) {\n//             setSelectedImage(imageFile);\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     async function send(vacation: VacationModel) {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n//             vacation.vacationId = vacationId;\n\n//             // Check if a new image was selected\n//             if (selectedImage) {\n//                 vacation.image = selectedImage;\n\n//             } else {\n//                 // If no new image was selected, set the image URL to the current one\n//                 vacation.imageUrl = currentImagePreview || \"\";\n//             }\n\n//             // Send a PUT request to edit the vacation\n//             await vacationsService.editVacation(vacation);\n//             notifyService.success(\"Vacation has been edited\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     }\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n//     return (\n//         <div className=\"EditVacation\">\n//             <h2>Edit Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     //No validate on start date because we edit vacation\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={selectedStartDate}\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"50\"\n//                     max=\"9999.99\"\n//                 />\n\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange} // Add onChange to handle image selection\n//                 />\n//                 {/* Display the current image preview */}\n//                 {currentImagePreview && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Current Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Current Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() => console.log(\"Image failed to load: \" + currentImagePreview)} // Handle image loading error\n//                         />\n//                     </div>\n//                 )}\n\n//                 <button className=\"btn btn-primary\">Edit</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default EditVacation;\n\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport \"./EditVacation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditVacation() {\n  _s();\n  const {\n    watch\n  } = useForm();\n  // const { register, handleSubmit, setValue } = useForm<VacationModel>();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm(); // Destructure the errors object\n\n  const [currentImagePreview, setCurrentImagePreview] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(null);\n  const navigate = useNavigate();\n  const params = useParams();\n  const vacationId = +params.vacationId;\n  useEffect(() => {\n    const token = authStore.getState().token;\n    if (!token) {\n      notifyService.error(\"Please Login\");\n      navigate(\"/login\");\n      return;\n    }\n    const role = authStore.getState().user.roleId;\n    if (role !== RoleModel.Admin) {\n      notifyService.error(\"You don't have access to this page\");\n      navigate(\"/home\");\n    }\n    vacationsService.getOneVacation(vacationId).then(backendVacation => {\n      setValue(\"vacationDestination\", backendVacation.vacationDestination);\n      setValue(\"vacationDescription\", backendVacation.vacationDescription);\n      setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n      setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n      setValue(\"vacationPrice\", backendVacation.vacationPrice);\n      setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n    }).catch(err => notifyService.error(err));\n  }, [vacationId, setValue]);\n  const handleImageChange = e => {\n    var _e$target$files;\n    const imageFile = (_e$target$files = e.target.files) === null || _e$target$files === void 0 ? void 0 : _e$target$files[0];\n    if (imageFile) {\n      setSelectedImage(imageFile);\n      const reader = new FileReader();\n      reader.onload = () => {\n        setCurrentImagePreview(reader.result);\n      };\n      reader.readAsDataURL(imageFile);\n    }\n  };\n  async function send(vacation) {\n    try {\n      if (vacation.vacationStartDate > vacation.vacationEndDate) {\n        notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n        return;\n      }\n      vacation.vacationId = vacationId;\n      if (selectedImage) {\n        vacation.image = selectedImage;\n      } else {\n        vacation.imageUrl = currentImagePreview || \"\";\n      }\n      await vacationsService.editVacation(vacation);\n      notifyService.success(\"Vacation has been edited\");\n      navigate(\"/vacations\");\n    } catch (err) {\n      notifyService.error(err.message || \"An error occurred while editing the vacation.\");\n    }\n  }\n  const selectedStartDate = watch(\"vacationStartDate\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"EditVacation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Vacation:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(send),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Destination:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...register(\"vacationDestination\"),\n        required: true,\n        minLength: 2,\n        maxLength: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ...register(\"vacationDescription\", {\n          required: true,\n          minLength: 2,\n          maxLength: 250\n        }),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), errors.vacationDescription && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"error\",\n        children: \"Description must be between 2 and 250 characters.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation Start Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        ...register(\"vacationStartDate\"),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Vacation End Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        ...register(\"vacationEndDate\"),\n        min: selectedStartDate,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Price: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        ...register(\"vacationPrice\"),\n        required: true,\n        min: \"50\",\n        max: \"9999.99\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Image: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        ...register(\"image\"),\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), currentImagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-image-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Current Image Preview:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentImagePreview,\n          alt: \"Current Vacation\",\n          onLoad: () => console.log(\"Image loaded successfully\"),\n          onError: () => console.log(\"Image failed to load: \" + currentImagePreview)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 9\n  }, this);\n}\n_s(EditVacation, \"bUZGa+t7Rwas8lSo2UFiUyHsrWw=\", false, function () {\n  return [useForm, useForm, useNavigate, useParams];\n});\n_c = EditVacation;\nexport default EditVacation;\nvar _c;\n$RefreshReg$(_c, \"EditVacation\");","map":{"version":3,"names":["useEffect","useState","useForm","useNavigate","useParams","RoleModel","authStore","notifyService","vacationsService","jsxDEV","_jsxDEV","EditVacation","_s","watch","register","handleSubmit","setValue","formState","errors","currentImagePreview","setCurrentImagePreview","selectedImage","setSelectedImage","navigate","params","vacationId","token","getState","error","role","user","roleId","Admin","getOneVacation","then","backendVacation","vacationDestination","vacationDescription","vacationStartDate","toString","split","vacationEndDate","vacationPrice","imageUrl","catch","err","handleImageChange","e","_e$target$files","imageFile","target","files","reader","FileReader","onload","result","readAsDataURL","send","vacation","image","editVacation","success","message","selectedStartDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","required","minLength","maxLength","min","step","max","accept","onChange","src","alt","onLoad","console","log","onError","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Components/VacationArea/EditVacation/EditVacation.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import RoleModel from \"../../../Models/RoleModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import \"./EditVacation.css\";\n\n\n// /**\n//  * The `EditVacation` component allows administrators to edit an existing vacation's details.\n//  * Administrators can modify the vacation's destination, description, start and end dates, price,\n//  * and select a new image for the vacation. The component ensures that the new vacation data\n//  * is valid and makes a PUT request to update the vacation on the server.\n//  */\n// function EditVacation(): JSX.Element {\n//     // Initialize react-hook-form\n//     const { watch } = useForm<VacationModel>();\n//     const { register, handleSubmit, setValue } = useForm<VacationModel>();\n\n//     // State for image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     // Get the navigation function\n//     const navigate = useNavigate();\n//     // Get the vacationId from the URL params\n//     const params = useParams();\n//     const vacationId = +params.vacationId;\n\n//     // UseEffect to fetch and set initial values\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n\n//         // Fetch the vacation data for editing\n//         vacationsService.getOneVacation(vacationId)\n//             .then(backendVacation => {\n//                 // Set form fields with the fetched data\n//                 setValue(\"vacationDestination\", backendVacation.vacationDestination);\n//                 setValue(\"vacationDescription\", backendVacation.vacationDescription);\n//                 setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationPrice\", backendVacation.vacationPrice);\n\n//                 // Set the image URL for preview\n//                 setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n//             })\n//             .catch(err => notifyService.error(err));\n//     }, [vacationId, setValue]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const imageFile = e.target.files?.[0];\n//         if (imageFile) {\n//             setSelectedImage(imageFile);\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     async function send(vacation: VacationModel) {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n//             vacation.vacationId = vacationId;\n\n//             // Check if a new image was selected\n//             if (selectedImage) {\n//                 vacation.image = selectedImage;\n\n//             } else {\n//                 // If no new image was selected, set the image URL to the current one\n//                 vacation.imageUrl = currentImagePreview || \"\";\n//             }\n\n//             // Send a PUT request to edit the vacation\n//             await vacationsService.editVacation(vacation);\n//             notifyService.success(\"Vacation has been edited\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     }\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n//     return (\n//         <div className=\"EditVacation\">\n//             <h2>Edit Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     //No validate on start date because we edit vacation\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={selectedStartDate}\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"50\"\n//                     max=\"9999.99\"\n//                 />\n\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange} // Add onChange to handle image selection\n//                 />\n//                 {/* Display the current image preview */}\n//                 {currentImagePreview && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Current Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Current Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() => console.log(\"Image failed to load: \" + currentImagePreview)} // Handle image loading error\n//                         />\n//                     </div>\n//                 )}\n\n//                 <button className=\"btn btn-primary\">Edit</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default EditVacation;\n\n\n\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport RoleModel from \"../../../Models/RoleModel\";\nimport VacationModel from \"../../../Models/VacationModel\";\nimport { authStore } from \"../../../Redux/AuthState\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport vacationsService from \"../../../Services/VacationsService\";\nimport \"./EditVacation.css\";\n\nfunction EditVacation(): JSX.Element {\n    const { watch } = useForm<VacationModel>();\n    // const { register, handleSubmit, setValue } = useForm<VacationModel>();\n    const { register, handleSubmit, setValue, formState: { errors } } = useForm<VacationModel>(); // Destructure the errors object\n\n\n    const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n    const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n    const navigate = useNavigate();\n    const params = useParams();\n    const vacationId = +params.vacationId;\n\n    useEffect(() => {\n        const token = authStore.getState().token;\n        if (!token) {\n            notifyService.error(\"Please Login\");\n            navigate(\"/login\");\n            return;\n        }\n\n        const role = authStore.getState().user.roleId;\n        if (role !== RoleModel.Admin) {\n            notifyService.error(\"You don't have access to this page\");\n            navigate(\"/home\");\n        }\n\n        vacationsService.getOneVacation(vacationId)\n            .then(backendVacation => {\n                setValue(\"vacationDestination\", backendVacation.vacationDestination);\n                setValue(\"vacationDescription\", backendVacation.vacationDescription);\n                setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n                setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n                setValue(\"vacationPrice\", backendVacation.vacationPrice);\n\n                setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n            })\n            .catch(err => notifyService.error(err));\n    }, [vacationId, setValue]);\n\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const imageFile = e.target.files?.[0];\n        if (imageFile) {\n            setSelectedImage(imageFile);\n            const reader = new FileReader();\n            reader.onload = () => {\n                setCurrentImagePreview(reader.result as string);\n            };\n            reader.readAsDataURL(imageFile);\n        }\n    };\n\n    async function send(vacation: VacationModel) {\n        try {\n            if (vacation.vacationStartDate > vacation.vacationEndDate) {\n                notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n                return;\n            }\n            vacation.vacationId = vacationId;\n\n            if (selectedImage) {\n                vacation.image = selectedImage;\n            } else {\n                vacation.imageUrl = currentImagePreview || \"\";\n            }\n\n            await vacationsService.editVacation(vacation);\n            notifyService.success(\"Vacation has been edited\");\n            navigate(\"/vacations\");\n        } catch (err: any) {\n            notifyService.error(err.message || \"An error occurred while editing the vacation.\");\n        }\n    }\n\n    const selectedStartDate = watch(\"vacationStartDate\");\n\n    return (\n        <div className=\"EditVacation\">\n            <h2>Edit Vacation:</h2>\n            <form onSubmit={handleSubmit(send)}>\n                <label>Vacation Destination:</label>\n                <input\n                    type=\"text\"\n                    {...register(\"vacationDestination\")}\n                    required\n                    minLength={2}\n                    maxLength={50}\n                />\n                <label>Vacation Description:</label>\n                <input\n                    type=\"text\"\n                    {...register(\"vacationDescription\", {\n                        required: true,\n                        minLength: 2,\n                        maxLength: 250,\n                    })}\n                    required\n                />\n                {errors.vacationDescription && (\n                    <span className=\"error\">Description must be between 2 and 250 characters.</span>\n                )}\n                <label>Vacation Start Date: </label>\n                <input\n                    type=\"date\"\n                    {...register(\"vacationStartDate\")}\n                    required\n                />\n                <label>Vacation End Date: </label>\n                <input\n                    type=\"date\"\n                    {...register(\"vacationEndDate\")}\n                    min={selectedStartDate}\n                    required\n                />\n                <label>Price: </label>\n                <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    {...register(\"vacationPrice\")}\n                    required\n                    min=\"50\"\n                    max=\"9999.99\"\n                />\n                <label>Image: </label>\n                <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    {...register(\"image\")}\n                    onChange={handleImageChange}\n                />\n                {currentImagePreview && (\n                    <div className=\"current-image-preview\">\n                        <p>Current Image Preview:</p>\n                        <img\n                            src={currentImagePreview}\n                            alt=\"Current Vacation\"\n                            onLoad={() => console.log(\"Image loaded successfully\")}\n                            onError={() => console.log(\"Image failed to load: \" + currentImagePreview)}\n                        />\n                    </div>\n                )}\n                <button className=\"btn btn-primary\">Edit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default EditVacation;\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,SAAS,MAAM,2BAA2B;AAEjD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,YAAYA,CAAA,EAAgB;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAM,CAAC,GAAGX,OAAO,EAAiB;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}