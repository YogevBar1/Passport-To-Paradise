{"ast":null,"code":"import { createStore } from \"redux\";\nimport jwtDecode from \"jwt-decode\";\n\n// 1. Global State:\nexport class AuthState {\n  // JWT.\n  // The user.\n\n  constructor() {\n    this.token = null;\n    this.user = null;\n    this.token = sessionStorage.getItem(\"token\");\n    if (this.token) {\n      this.user = jwtDecode(this.token).user;\n    }\n  }\n}\n\n// 2. Action Type:\nexport let AuthActionType;\n\n// 3. Action:\n(function (AuthActionType) {\n  AuthActionType[\"Register\"] = \"Register\";\n  AuthActionType[\"Login\"] = \"Login\";\n  AuthActionType[\"Logout\"] = \"Logout\";\n})(AuthActionType || (AuthActionType = {}));\n// 4. Reducer (invoked by redux library): \nexport function authReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...currentState\n  };\n  switch (action.type) {\n    case AuthActionType.Register: // Here the payload is JWT token (string) containing the user.\n    case AuthActionType.Login:\n      // Here the payload is JWT token (string) containing the user.\n      newState.token = action.payload;\n      newState.user = jwtDecode(newState.token).user;\n      sessionStorage.setItem(\"token\", newState.token);\n      break;\n    case AuthActionType.Logout:\n      newState.token = null;\n      newState.user = null;\n      sessionStorage.removeItem(\"token\");\n      break;\n  }\n  return newState;\n}\n\n// 5. Store:\nexport const authStore = createStore(authReducer);","map":{"version":3,"names":["createStore","jwtDecode","AuthState","constructor","token","user","sessionStorage","getItem","AuthActionType","authReducer","currentState","arguments","length","undefined","action","newState","type","Register","Login","payload","setItem","Logout","removeItem","authStore"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Redux/AuthState.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport UserModel from \"../Models/UserModel\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n// 1. Global State:\r\nexport class AuthState {\r\n    public token: string = null; // JWT.\r\n    public user: UserModel = null; // The user.\r\n\r\n    public constructor() {\r\n        this.token = sessionStorage.getItem(\"token\");\r\n        if (this.token) {\r\n            this.user = jwtDecode<{ user: UserModel }>(this.token).user;\r\n        }\r\n    }\r\n}\r\n\r\n// 2. Action Type:\r\nexport enum AuthActionType {\r\n    Register = \"Register\",\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// 3. Action:\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: string;\r\n}\r\n\r\n// 4. Reducer (invoked by redux library): \r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n        case AuthActionType.Register: // Here the payload is JWT token (string) containing the user.\r\n        case AuthActionType.Login: // Here the payload is JWT token (string) containing the user.\r\n            newState.token = action.payload;\r\n            newState.user = jwtDecode<{ user: UserModel }>(newState.token).user;\r\n            sessionStorage.setItem(\"token\", newState.token);\r\n\r\n            break;\r\n        case AuthActionType.Logout:\r\n            newState.token = null;\r\n            newState.user = null;\r\n            sessionStorage.removeItem(\"token\");\r\n            break;\r\n    }\r\n    return newState;\r\n}\r\n\r\n// 5. Store:\r\nexport const authStore = createStore(authReducer);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA,OAAO,MAAMC,SAAS,CAAC;EACU;EACE;;EAExBC,WAAWA,CAAA,EAAG;IAAA,KAHdC,KAAK,GAAW,IAAI;IAAA,KACpBC,IAAI,GAAc,IAAI;IAGzB,IAAI,CAACD,KAAK,GAAGE,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC5C,IAAI,IAAI,CAACH,KAAK,EAAE;MACZ,IAAI,CAACC,IAAI,GAAGJ,SAAS,CAAsB,IAAI,CAACG,KAAK,CAAC,CAACC,IAAI;IAC/D;EACJ;AACJ;;AAEA;AACA,WAAYG,cAAc;;AAM1B;AAAA,WANYA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;AAAA,GAAdA,cAAc,KAAdA,cAAc;AAY1B;AACA,OAAO,SAASC,WAAWA,CAAA,EAAgE;EAAA,IAA/DC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIT,SAAS,EAAE;EAAA,IAAEY,MAAkB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAE1E,MAAME,QAAQ,GAAG;IAAE,GAAGL;EAAa,CAAC;EAEpC,QAAQI,MAAM,CAACE,IAAI;IACf,KAAKR,cAAc,CAACS,QAAQ,CAAC,CAAC;IAC9B,KAAKT,cAAc,CAACU,KAAK;MAAE;MACvBH,QAAQ,CAACX,KAAK,GAAGU,MAAM,CAACK,OAAO;MAC/BJ,QAAQ,CAACV,IAAI,GAAGJ,SAAS,CAAsBc,QAAQ,CAACX,KAAK,CAAC,CAACC,IAAI;MACnEC,cAAc,CAACc,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACX,KAAK,CAAC;MAE/C;IACJ,KAAKI,cAAc,CAACa,MAAM;MACtBN,QAAQ,CAACX,KAAK,GAAG,IAAI;MACrBW,QAAQ,CAACV,IAAI,GAAG,IAAI;MACpBC,cAAc,CAACgB,UAAU,CAAC,OAAO,CAAC;MAClC;EAAM;EAEd,OAAOP,QAAQ;AACnB;;AAEA;AACA,OAAO,MAAMQ,SAAS,GAAGvB,WAAW,CAACS,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}