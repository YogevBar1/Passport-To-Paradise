{"ast":null,"code":"// import { useForm } from \"react-hook-form\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import \"./InsertVacation.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import { useEffect, useState } from \"react\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// /**\n//  * The `InsertVacation` component enables administrators to add new vacation details.\n//  * Administrators can input the destination, description, start and end dates, price,\n//  * and select an image for the new vacation. The component validates the vacation data\n//  * and sends a POST request to create the vacation on the server.\n//  */\n// function InsertVacation(): JSX.Element {\n\n//     // Initialize the form handling with react-hook-form\n//     const { register, handleSubmit, watch } = useForm<VacationModel>();\n//     const navigate = useNavigate();\n\n//     // State to manage image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to track if a new image is selected\n//     const [newImageSelected, setNewImageSelected] = useState<boolean>(false);\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n//     }, []);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         // Get the selected image file from the input element\n//         const imageFile = e.target.files?.[0];\n\n//         // Check if an image file was selected\n//         if (imageFile) {\n//             // Set the selected image file in the state\n//             setSelectedImage(imageFile);\n\n//             // Indicate that a new image has been selected\n//             setNewImageSelected(true);\n\n//             // Create a FileReader to read the image file\n//             const reader = new FileReader();\n\n//             // When the FileReader finishes reading the file, this event handler is called\n//             reader.onload = () => {\n//                 // Set the image preview when the file is loaded\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n\n//             // Read the selected image file as a data URL (base64 encoded)\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     // Function to handle form submission\n//     const send = async (vacation: VacationModel) => {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n\n//             // Check if a new image was selected\n//             vacation.image = newImageSelected ? (selectedImage as File) : undefined;\n\n//             // Send a POST request to add the vacation\n//             await vacationsService.addVacation(vacation);\n//             notifyService.success(\"Vacation has been added\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     };\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n\n//     return (\n//         <div className=\"AddVacation\">\n//             <h2>Add Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     min={new Date().toISOString().split(\"T\")[0]}\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={\n//                         selectedStartDate\n//                             ? new Date(selectedStartDate).toISOString().split(\"T\")[0]\n//                             : new Date().toISOString().split(\"T\")[0]\n//                     }\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"0\"\n//                     max=\"9999.99\"\n//                 />\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange}\n//                 />\n\n//                 {/* Display the image preview only when a new image has been selected */}\n//                 {newImageSelected && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Selected Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Selected Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() =>\n//                                 console.log(\"Image failed to load: \" + currentImagePreview)\n//                             }\n//                         />\n//                     </div>\n//                 )}\n//                 <button>Add Vacation</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default InsertVacation;","map":{"version":3,"names":[],"sources":["C:/John Bryce Programing/Final Project Vacations/Frontend/src/Components/VacationArea/InsertVacation/InsertVacation.tsx"],"sourcesContent":["// import { useForm } from \"react-hook-form\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import \"./InsertVacation.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import { useEffect, useState } from \"react\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// /**\n//  * The `InsertVacation` component enables administrators to add new vacation details.\n//  * Administrators can input the destination, description, start and end dates, price,\n//  * and select an image for the new vacation. The component validates the vacation data\n//  * and sends a POST request to create the vacation on the server.\n//  */\n// function InsertVacation(): JSX.Element {\n\n//     // Initialize the form handling with react-hook-form\n//     const { register, handleSubmit, watch } = useForm<VacationModel>();\n//     const navigate = useNavigate();\n\n//     // State to manage image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to track if a new image is selected\n//     const [newImageSelected, setNewImageSelected] = useState<boolean>(false);\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n//     }, []);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         // Get the selected image file from the input element\n//         const imageFile = e.target.files?.[0];\n\n//         // Check if an image file was selected\n//         if (imageFile) {\n//             // Set the selected image file in the state\n//             setSelectedImage(imageFile);\n\n//             // Indicate that a new image has been selected\n//             setNewImageSelected(true);\n\n//             // Create a FileReader to read the image file\n//             const reader = new FileReader();\n\n//             // When the FileReader finishes reading the file, this event handler is called\n//             reader.onload = () => {\n//                 // Set the image preview when the file is loaded\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n\n//             // Read the selected image file as a data URL (base64 encoded)\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     // Function to handle form submission\n//     const send = async (vacation: VacationModel) => {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n\n//             // Check if a new image was selected\n//             vacation.image = newImageSelected ? (selectedImage as File) : undefined;\n\n//             // Send a POST request to add the vacation\n//             await vacationsService.addVacation(vacation);\n//             notifyService.success(\"Vacation has been added\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     };\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n\n//     return (\n//         <div className=\"AddVacation\">\n//             <h2>Add Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     min={new Date().toISOString().split(\"T\")[0]}\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={\n//                         selectedStartDate\n//                             ? new Date(selectedStartDate).toISOString().split(\"T\")[0]\n//                             : new Date().toISOString().split(\"T\")[0]\n//                     }\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"0\"\n//                     max=\"9999.99\"\n//                 />\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange}\n//                 />\n\n//                 {/* Display the image preview only when a new image has been selected */}\n//                 {newImageSelected && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Selected Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Selected Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() =>\n//                                 console.log(\"Image failed to load: \" + currentImagePreview)\n//                             }\n//                         />\n//                     </div>\n//                 )}\n//                 <button>Add Vacation</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default InsertVacation;\n\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}