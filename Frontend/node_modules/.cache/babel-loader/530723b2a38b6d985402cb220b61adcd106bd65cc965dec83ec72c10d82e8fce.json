{"ast":null,"code":"// // import React, { useEffect, useState } from \"react\";\n// // import { NavLink, useNavigate } from \"react-router-dom\";\n// // import UserModel from \"../../../Models/UserModel\";\n// // import VacationModel from \"../../../Models/VacationModel\";\n// // import { authStore } from \"../../../Redux/AuthState\";\n// // import notifyService from \"../../../Services/NotifyService\";\n// // import vacationsService from \"../../../Services/VacationsService\";\n// // import VacationCard from \"../VacationCard/VacationCard\";\n// // import \"./ListVacation.css\";\n// // import RoleModel from \"../../../Models/RoleModel\";\n\n// // /**\n// //  * The `ListVacation` component displays a list of vacations, with filtering options for users.\n// //  * Administrators can view all vacations, download vacation data as a CSV file, and add new vacations.\n// //  * Users can filter vacations by followed status, upcoming start dates, and currently active vacations.\n// //  * Users can also view and interact with vacation cards, including following/unfollowing vacations.\n// //  */\n// // function ListVacation(): JSX.Element {\n// //     const navigate = useNavigate();\n// //     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n// //         []\n// //     );\n// //     const [currentPage, setCurrentPage] = useState<number>(1);\n// //     const vacationsPerPage = 9;\n// //     const [user, setUser] = useState<UserModel>();\n// //     const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n// //     const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n// //     const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n// //     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n\n// //     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n// //         []\n// //     ); // State to store filtered vacations\n\n// //     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n// //         // Update the frontendVacations state\n// //         setFrontendVacations((prevVacations) =>\n// //             prevVacations.map((vacation) =>\n// //                 vacation.vacationId === vacationId\n// //                     ? { ...vacation, isFollowing: followed }\n// //                     : vacation\n// //             )\n// //         );\n// //     };\n\n// //     useEffect(() => {\n// //         // Check if the user login:\n// //         const token = authStore.getState().token;\n// //         // If the user is not logged in, show an error message and navigate to the login page\n// //         if (!token) {\n// //             notifyService.error(\"Please Login\");\n// //             navigate(\"/login\");\n// //             return;\n// //         }\n\n// //         // Get the logged-in user from the application state and set it in the component's state\n// //         const loggedUser = authStore.getState().user;\n// //         setUser(loggedUser);\n\n// //         // Fetch followed vacations for the logged-in user and update component state\n// //         vacationsService\n// //             .getFollowedVacations(loggedUser?.userId)\n// //             .then(backendVacations => {\n// //                 // Sort the fetched vacations by start date\n// //                 backendVacations.sort(\n// //                     (a, b) =>\n// //                         new Date(a.vacationStartDate).getTime() -\n// //                         new Date(b.vacationStartDate).getTime()\n// //                 );\n// //                 // Set both frontend and filtered vacations to the fetched data\n// //                 setFrontendVacations(backendVacations);\n// //                 setFilteredVacations(backendVacations);\n// //             })\n// //             .catch((err) => notifyService.error(err));\n// //     }, [vacationDeleted]);\n\n// //     // Function to convert data to CSV\n// //     function convertToCSV(data: VacationModel[]): string {\n// //         const header = \"Followers,Destination\\n\";\n// //         // Map each vacation to a CSV row containing followers count and destination\n// //         const csvData = data.map((item) => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n// //         return header + csvData;\n// //     }\n\n// //     // Handler for changing the current page in pagination\n// //     const handlePageChange = (newPage: number) => {\n// //         setCurrentPage(newPage);\n// //     };\n\n// //     // Calculate the total number of pages based on the filtered vacations and vacations per page\n// //     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n\n// //     // Calculate the index of the last vacation to display on the current page\n// //     const indexOfLastVacation = currentPage * vacationsPerPage;\n\n// //     // Calculate the index of the first vacation to display on the current page\n// //     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n// //     // Function to filter vacations based on the checkbox state\n// //     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n// //         const { name, checked } = e.target;\n\n// //         // Create new state variables for each checkbox\n// //         let newShowFollowed = showFollowed;\n// //         let newShowUpcoming = showUpcoming;\n// //         let newShowActive = showActive;\n\n// //         if (name === \"showFollowed\") {\n// //             newShowFollowed = checked;\n// //         } else if (name === \"showUpcoming\") {\n// //             newShowUpcoming = checked;\n// //         } else if (name === \"showActive\") {\n// //             newShowActive = checked;\n// //         }\n\n// //         // Calculate the filtered vacations based on the new checkbox states\n// //         // Calculate the current date for filtering\n// //         const currentDate = new Date();\n// //         // Filter the vacations based on the new checkbox states\n// //         const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n// //             // Determine if the \"Show Followed Vacations\" checkbox is checked\n// //             const isFollowed = newShowFollowed;\n\n// //             // Determine if the \"Show Upcoming Vacations\" checkbox is checked\n// //             const isUpcoming = newShowUpcoming;\n\n// //             // Determine if the \"Show Active Vacations\" checkbox is checked\n// //             const isActive = newShowActive;\n\n// //             // Convert vacation start and end dates to Date objects\n// //             const vacationStartDate = new Date(vacation.vacationStartDate);\n// //             const vacationEndDate = new Date(vacation.vacationEndDate);\n\n// //             // Define the filter conditions based on the combination of checkboxes\n// //             let meetsFilterConditions = true;\n// //             if (isFollowed) {\n// //                 meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n// //             }\n// //             // Check if \"Show Upcoming Vacations\" is checked and the vacation starts in the future\n// //             if (isUpcoming) {\n// //                 meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n// //             }\n// //             // Check if \"Show Active Vacations\" is checked and the vacation is currently active\n// //             if (isActive) {\n// //                 meetsFilterConditions =\n// //                     meetsFilterConditions &&\n// //                     vacationStartDate <= currentDate &&\n// //                     vacationEndDate >= currentDate;\n// //             }\n// //             // Return true if the vacation meets all filter conditions, otherwise false\n// //             return meetsFilterConditions;\n// //         });\n\n// //         // Update the checkbox states and filtered vacations\n// //         setShowFollowed(newShowFollowed);\n// //         setShowUpcoming(newShowUpcoming);\n// //         setShowActive(newShowActive);\n// //         setFilteredVacations(filteredVacationsByCheckbox);\n// //         setCurrentPage(1);\n// //     };\n\n// //     const currentVacations = filteredVacations.slice(\n// //         indexOfFirstVacation,\n// //         indexOfLastVacation\n// //     );\n\n// //     // Function to handle deleting a vacation\n// //     const handleDeleteVacation = async (vacationId: number) => {\n// //         try {\n// //             // Display a confirmation dialog\n// //             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n// //             if (!confirmed) {\n// //                 // The user canceled the deletion\n// //                 return;\n// //             }\n\n// //             // Call the deleteVacation function from the vacationsService\n// //             await vacationsService.deleteVacation(vacationId);\n\n// //             // Update the frontendVacations state by filtering out the deleted vacation\n// //             setFrontendVacations((prevVacations) =>\n// //                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n// //             );\n\n// //             notifyService.success(\"The vacation has been successfully deleted\");\n\n// //             // Trigger a re-render by updating vacationDeleted\n// //             setVacationDeleted((prevValue) => !prevValue);\n\n// //         } catch (error) {\n// //             console.error(\"Error deleting vacation:\", error);\n// //         }\n// //     };\n\n// //     // Function to handle downloading the CSV\n// //     function handleDownloadCSV() {\n// //         // Generate a timestamp for the current date and time\n// //         const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n\n// //         // Create a filename with the timestamp\n// //         const filename = `vacations_${timestamp}.csv`;\n\n// //         // Convert the filteredVacations data to CSV format\n// //         const csvData = convertToCSV(filteredVacations);\n\n// //         // Create a Blob object with the CSV data\n// //         const blob = new Blob([csvData], { type: \"text/csv\" });\n\n// //         // Create a temporary URL for the Blob\n// //         const url = window.URL.createObjectURL(blob);\n\n// //         // Create an anchor element for the download\n// //         const a = document.createElement(\"a\");\n// //         a.href = url;\n// //         a.download = filename; // Use the filename with the timestamp\n\n// //         // Trigger a click event to start the download\n// //         a.click();\n\n// //         // Clean up by revoking the Blob URL\n// //         window.URL.revokeObjectURL(url);\n// //     }\n\n// //     return (\n// //         <div className=\"List\">\n// //             {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n// //             <br></br>\n// //             {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n// //             <div>\n// //                 {user && user.roleId === RoleModel.Admin && (\n// //                     <button onClick={handleDownloadCSV}>Download CSV file</button>\n// //                 )}\n// //             </div>\n\n// //             {user && user.roleId == RoleModel.User &&\n// //                 <div >\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showFollowed\"\n// //                             checked={showFollowed}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Followed Vacations\n// //                     </label>\n// //                     <br></br>\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showUpcoming\"\n// //                             checked={showUpcoming}\n// //                             disabled={showActive}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Upcoming Vacations\n// //                     </label>\n// //                     <br></br>\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showActive\"\n// //                             checked={showActive}\n// //                             disabled={showUpcoming}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Active Vacations\n// //                     </label>\n// //                 </div>\n// //             }\n// //             <div className=\"pagination\">\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage - 1)}\n// //                     disabled={currentPage === 1}\n// //                 >\n// //                     Previous\n// //                 </button>\n// //                 {Array.from({ length: totalPages }, (_, i) => (\n// //                     <button\n// //                         key={i}\n// //                         onClick={() => handlePageChange(i + 1)}\n// //                         className={currentPage === i + 1 ? \"active\" : \"\"}\n// //                     >\n// //                         {i + 1}\n// //                     </button>\n// //                 ))}\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage + 1)}\n// //                     disabled={currentPage === totalPages}\n// //                 >\n// //                     Next\n// //                 </button>\n// //             </div>\n// //             <h2>Our Vacations</h2>\n// //             {currentVacations.map((vacation) => (\n// //                 <VacationCard\n// //                     key={vacation.vacationId}\n// //                     vacation={vacation}\n// //                     userId={user.userId}\n// //                     followersCount={vacation.followersCount}\n// //                     user={user}\n// //                     onDelete={handleDeleteVacation}\n// //                     onUpdateVacations={handleUpdateVacations}\n// //                 />\n\n// //             ))}\n// //             <div className=\"pagination\">\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage - 1)}\n// //                     disabled={currentPage === 1}\n// //                 >\n// //                     Previous\n// //                 </button>\n// //                 {Array.from({ length: totalPages }, (_, i) => (\n// //                     <button\n// //                         key={i}\n// //                         onClick={() => handlePageChange(i + 1)}\n// //                         className={currentPage === i + 1 ? \"active\" : \"\"}\n// //                     >\n// //                         {i + 1}\n// //                     </button>\n// //                 ))}\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage + 1)}\n// //                     disabled={currentPage === totalPages}\n// //                 >\n// //                     Next\n// //                 </button>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ListVacation;\n\n// import React, { useEffect, useState } from \"react\";\n// import { NavLink, useNavigate } from \"react-router-dom\";\n// import UserModel from \"../../../Models/UserModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import VacationCard from \"../VacationCard/VacationCard\";\n// import \"./ListVacation.css\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// function ListVacation(): JSX.Element {\n//     const navigate = useNavigate();\n//     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>([]);\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const vacationsPerPage = 9;\n//     const [user, setUser] = useState<UserModel>();\n//     const [showFollowed, setShowFollowed] = useState<boolean>(false);\n//     const [showUpcoming, setShowUpcoming] = useState<boolean>(false);\n//     const [showActive, setShowActive] = useState<boolean>(false);\n//     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false);\n\n//     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>([]);\n\n//     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n//         // Update the frontendVacations state\n//         setFrontendVacations((prevVacations) =>\n//             prevVacations.map((vacation) =>\n//                 vacation.vacationId === vacationId\n//                     ? { ...vacation, isFollowing: followed }\n//                     : vacation\n//             )\n//         );\n//     };\n\n//     useEffect(() => {\n//         // Check if the user is logged in\n//         const token = authStore.getState().token;\n\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         const loggedUser = authStore.getState().user;\n//         setUser(loggedUser);\n\n//         vacationsService\n//             .getFollowedVacations(loggedUser?.userId)\n//             .then((backendVacations) => {\n//                 backendVacations.sort(\n//                     (a, b) =>\n//                         new Date(a.vacationStartDate).getTime() -\n//                         new Date(b.vacationStartDate).getTime()\n//                 );\n//                 setFrontendVacations(backendVacations);\n//                 setFilteredVacations(backendVacations);\n//             })\n//             .catch((err) => notifyService.error(err));\n//     }, [vacationDeleted]);\n\n//     function convertToCSV(data: VacationModel[]): string {\n//         const header = \"Followers,Destination\\n\";\n//         const csvData = data\n//             .map((item) => `${item.followersCount},${item.vacationDestination}`)\n//             .join(\"\\n\");\n//         return header + csvData;\n//     }\n\n//     const handlePageChange = (newPage: number) => {\n//         setCurrentPage(newPage);\n//     };\n\n//     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n//     const indexOfLastVacation = currentPage * vacationsPerPage;\n//     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n//     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const { name, checked } = e.target;\n\n//         let newShowFollowed = showFollowed;\n//         let newShowUpcoming = showUpcoming;\n//         let newShowActive = showActive;\n\n//         if (name === \"showFollowed\") {\n//             newShowFollowed = checked;\n//         } else if (name === \"showUpcoming\") {\n//             newShowUpcoming = checked;\n//         } else if (name === \"showActive\") {\n//             newShowActive = checked;\n//         }\n\n//         const currentDate = new Date();\n//         const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//             const isFollowed = newShowFollowed;\n//             const isUpcoming = newShowUpcoming;\n//             const isActive = newShowActive;\n//             const vacationStartDate = new Date(vacation.vacationStartDate);\n//             const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//             let meetsFilterConditions = true;\n//             if (isFollowed) {\n//                 meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//             }\n//             if (isUpcoming) {\n//                 meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//             }\n//             if (isActive) {\n//                 meetsFilterConditions =\n//                     meetsFilterConditions &&\n//                     vacationStartDate <= currentDate &&\n//                     vacationEndDate >= currentDate;\n//             }\n//             return meetsFilterConditions;\n//         });\n\n//         setShowFollowed(newShowFollowed);\n//         setShowUpcoming(newShowUpcoming);\n//         setShowActive(newShowActive);\n//         setFilteredVacations(filteredVacationsByCheckbox);\n//         setCurrentPage(1);\n//     };\n\n//     const currentVacations = filteredVacations.slice(\n//         indexOfFirstVacation,\n//         indexOfLastVacation\n//     );\n\n//     const handleDeleteVacation = async (vacationId: number) => {\n//         try {\n//             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n//             if (!confirmed) {\n//                 return;\n//             }\n\n//             await vacationsService.deleteVacation(vacationId);\n\n//             setFrontendVacations((prevVacations) =>\n//                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n//             );\n\n//             notifyService.success(\"The vacation has been successfully deleted\");\n\n//             setVacationDeleted((prevValue) => !prevValue);\n\n//         } catch (error) {\n//             console.error(\"Error deleting vacation:\", error);\n//         }\n//     };\n\n//     function handleDownloadCSV() {\n//         const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n//         const filename = `vacations_${timestamp}.csv`;\n//         const csvData = convertToCSV(filteredVacations);\n//         const blob = new Blob([csvData], { type: \"text/csv\" });\n//         const url = window.URL.createObjectURL(blob);\n//         const a = document.createElement(\"a\");\n//         a.href = url;\n//         a.download = filename;\n\n//         a.click();\n//         window.URL.revokeObjectURL(url);\n//     }\n\n//     return (\n//         <div className=\"ListVacation\">\n//             <header>\n//                 <nav>\n//                     <ul>\n//                         <li>\n//                             <NavLink to=\"/vacations/add\">Add Vacation</NavLink>\n//                         </li>\n//                         <li>\n//                             <NavLink to=\"/vacations/report\">Vacation Report</NavLink>\n//                         </li>\n//                     </ul>\n//                 </nav>\n//                 {user && user.roleId === RoleModel.Admin && (\n//                     <button onClick={handleDownloadCSV} className=\"download-csv-button\">\n//                         Download CSV\n//                     </button>\n//                 )}\n//             </header>\n//             <section className=\"filter-options\">\n//                 {user && user.roleId === RoleModel.User && (\n//                     <div className=\"filter-checkboxes\">\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showFollowed\"\n//                                 checked={showFollowed}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Followed Vacations\n//                         </label>\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showUpcoming\"\n//                                 checked={showUpcoming}\n//                                 disabled={showActive}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Upcoming Vacations\n//                         </label>\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showActive\"\n//                                 checked={showActive}\n//                                 disabled={showUpcoming}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Active Vacations\n//                         </label>\n//                     </div>\n//                 )}\n//             </section>\n//             <section className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </section>\n//             <section className=\"vacation-list\">\n//                 <h2>Our Vacations</h2>\n//                 <div className=\"vacation-cards\">\n//                     {currentVacations.map((vacation) => (\n//                         <VacationCard\n//                             key={vacation.vacationId}\n//                             vacation={vacation}\n//                             userId={user.userId}\n//                             followersCount={vacation.followersCount}\n//                             user={user}\n//                             onDelete={handleDeleteVacation}\n//                             onUpdateVacations={handleUpdateVacations}\n//                         />\n//                     ))}\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default ListVacation;","map":{"version":3,"names":[],"sources":["C:/John Bryce Programing/Final Project Vacations/Frontend/src/Components/VacationArea/ListVacation/ListVacation.tsx"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\n// // import { NavLink, useNavigate } from \"react-router-dom\";\n// // import UserModel from \"../../../Models/UserModel\";\n// // import VacationModel from \"../../../Models/VacationModel\";\n// // import { authStore } from \"../../../Redux/AuthState\";\n// // import notifyService from \"../../../Services/NotifyService\";\n// // import vacationsService from \"../../../Services/VacationsService\";\n// // import VacationCard from \"../VacationCard/VacationCard\";\n// // import \"./ListVacation.css\";\n// // import RoleModel from \"../../../Models/RoleModel\";\n\n// // /**\n// //  * The `ListVacation` component displays a list of vacations, with filtering options for users.\n// //  * Administrators can view all vacations, download vacation data as a CSV file, and add new vacations.\n// //  * Users can filter vacations by followed status, upcoming start dates, and currently active vacations.\n// //  * Users can also view and interact with vacation cards, including following/unfollowing vacations.\n// //  */\n// // function ListVacation(): JSX.Element {\n// //     const navigate = useNavigate();\n// //     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>(\n// //         []\n// //     );\n// //     const [currentPage, setCurrentPage] = useState<number>(1);\n// //     const vacationsPerPage = 9;\n// //     const [user, setUser] = useState<UserModel>();\n// //     const [showFollowed, setShowFollowed] = useState<boolean>(false); // State to track if checkbox is checked\n// //     const [showUpcoming, setShowUpcoming] = useState<boolean>(false); // State to track if \"Show Upcoming Vacations\" checkbox is checked\n// //     const [showActive, setShowActive] = useState<boolean>(false); // State to track if \"Show Active Vacations\" checkbox is checked\n// //     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false); // Add state to trigger re-render\n\n// //     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>(\n// //         []\n// //     ); // State to store filtered vacations\n\n// //     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n// //         // Update the frontendVacations state\n// //         setFrontendVacations((prevVacations) =>\n// //             prevVacations.map((vacation) =>\n// //                 vacation.vacationId === vacationId\n// //                     ? { ...vacation, isFollowing: followed }\n// //                     : vacation\n// //             )\n// //         );\n// //     };\n\n// //     useEffect(() => {\n// //         // Check if the user login:\n// //         const token = authStore.getState().token;\n// //         // If the user is not logged in, show an error message and navigate to the login page\n// //         if (!token) {\n// //             notifyService.error(\"Please Login\");\n// //             navigate(\"/login\");\n// //             return;\n// //         }\n\n// //         // Get the logged-in user from the application state and set it in the component's state\n// //         const loggedUser = authStore.getState().user;\n// //         setUser(loggedUser);\n\n// //         // Fetch followed vacations for the logged-in user and update component state\n// //         vacationsService\n// //             .getFollowedVacations(loggedUser?.userId)\n// //             .then(backendVacations => {\n// //                 // Sort the fetched vacations by start date\n// //                 backendVacations.sort(\n// //                     (a, b) =>\n// //                         new Date(a.vacationStartDate).getTime() -\n// //                         new Date(b.vacationStartDate).getTime()\n// //                 );\n// //                 // Set both frontend and filtered vacations to the fetched data\n// //                 setFrontendVacations(backendVacations);\n// //                 setFilteredVacations(backendVacations);\n// //             })\n// //             .catch((err) => notifyService.error(err));\n// //     }, [vacationDeleted]);\n\n// //     // Function to convert data to CSV\n// //     function convertToCSV(data: VacationModel[]): string {\n// //         const header = \"Followers,Destination\\n\";\n// //         // Map each vacation to a CSV row containing followers count and destination\n// //         const csvData = data.map((item) => `${item.followersCount},${item.vacationDestination}`).join(\"\\n\");\n// //         return header + csvData;\n// //     }\n\n// //     // Handler for changing the current page in pagination\n// //     const handlePageChange = (newPage: number) => {\n// //         setCurrentPage(newPage);\n// //     };\n\n// //     // Calculate the total number of pages based on the filtered vacations and vacations per page\n// //     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n\n// //     // Calculate the index of the last vacation to display on the current page\n// //     const indexOfLastVacation = currentPage * vacationsPerPage;\n\n// //     // Calculate the index of the first vacation to display on the current page\n// //     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n// //     // Function to filter vacations based on the checkbox state\n// //     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n// //         const { name, checked } = e.target;\n\n// //         // Create new state variables for each checkbox\n// //         let newShowFollowed = showFollowed;\n// //         let newShowUpcoming = showUpcoming;\n// //         let newShowActive = showActive;\n\n// //         if (name === \"showFollowed\") {\n// //             newShowFollowed = checked;\n// //         } else if (name === \"showUpcoming\") {\n// //             newShowUpcoming = checked;\n// //         } else if (name === \"showActive\") {\n// //             newShowActive = checked;\n// //         }\n\n// //         // Calculate the filtered vacations based on the new checkbox states\n// //         // Calculate the current date for filtering\n// //         const currentDate = new Date();\n// //         // Filter the vacations based on the new checkbox states\n// //         const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n// //             // Determine if the \"Show Followed Vacations\" checkbox is checked\n// //             const isFollowed = newShowFollowed;\n\n// //             // Determine if the \"Show Upcoming Vacations\" checkbox is checked\n// //             const isUpcoming = newShowUpcoming;\n\n// //             // Determine if the \"Show Active Vacations\" checkbox is checked\n// //             const isActive = newShowActive;\n\n// //             // Convert vacation start and end dates to Date objects\n// //             const vacationStartDate = new Date(vacation.vacationStartDate);\n// //             const vacationEndDate = new Date(vacation.vacationEndDate);\n\n// //             // Define the filter conditions based on the combination of checkboxes\n// //             let meetsFilterConditions = true;\n// //             if (isFollowed) {\n// //                 meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n// //             }\n// //             // Check if \"Show Upcoming Vacations\" is checked and the vacation starts in the future\n// //             if (isUpcoming) {\n// //                 meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n// //             }\n// //             // Check if \"Show Active Vacations\" is checked and the vacation is currently active\n// //             if (isActive) {\n// //                 meetsFilterConditions =\n// //                     meetsFilterConditions &&\n// //                     vacationStartDate <= currentDate &&\n// //                     vacationEndDate >= currentDate;\n// //             }\n// //             // Return true if the vacation meets all filter conditions, otherwise false\n// //             return meetsFilterConditions;\n// //         });\n\n// //         // Update the checkbox states and filtered vacations\n// //         setShowFollowed(newShowFollowed);\n// //         setShowUpcoming(newShowUpcoming);\n// //         setShowActive(newShowActive);\n// //         setFilteredVacations(filteredVacationsByCheckbox);\n// //         setCurrentPage(1);\n// //     };\n\n// //     const currentVacations = filteredVacations.slice(\n// //         indexOfFirstVacation,\n// //         indexOfLastVacation\n// //     );\n\n// //     // Function to handle deleting a vacation\n// //     const handleDeleteVacation = async (vacationId: number) => {\n// //         try {\n// //             // Display a confirmation dialog\n// //             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n// //             if (!confirmed) {\n// //                 // The user canceled the deletion\n// //                 return;\n// //             }\n\n// //             // Call the deleteVacation function from the vacationsService\n// //             await vacationsService.deleteVacation(vacationId);\n\n// //             // Update the frontendVacations state by filtering out the deleted vacation\n// //             setFrontendVacations((prevVacations) =>\n// //                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n// //             );\n\n// //             notifyService.success(\"The vacation has been successfully deleted\");\n\n// //             // Trigger a re-render by updating vacationDeleted\n// //             setVacationDeleted((prevValue) => !prevValue);\n\n// //         } catch (error) {\n// //             console.error(\"Error deleting vacation:\", error);\n// //         }\n// //     };\n\n// //     // Function to handle downloading the CSV\n// //     function handleDownloadCSV() {\n// //         // Generate a timestamp for the current date and time\n// //         const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n\n// //         // Create a filename with the timestamp\n// //         const filename = `vacations_${timestamp}.csv`;\n\n// //         // Convert the filteredVacations data to CSV format\n// //         const csvData = convertToCSV(filteredVacations);\n\n// //         // Create a Blob object with the CSV data\n// //         const blob = new Blob([csvData], { type: \"text/csv\" });\n\n// //         // Create a temporary URL for the Blob\n// //         const url = window.URL.createObjectURL(blob);\n\n// //         // Create an anchor element for the download\n// //         const a = document.createElement(\"a\");\n// //         a.href = url;\n// //         a.download = filename; // Use the filename with the timestamp\n\n// //         // Trigger a click event to start the download\n// //         a.click();\n\n// //         // Clean up by revoking the Blob URL\n// //         window.URL.revokeObjectURL(url);\n// //     }\n\n// //     return (\n// //         <div className=\"List\">\n// //             {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/add\">Add Vacation</NavLink>}\n// //             <br></br>\n// //             {user && user.roleId === RoleModel.Admin && <NavLink to=\"/vacations/report\">Vacation Report</NavLink>}\n\n// //             <div>\n// //                 {user && user.roleId === RoleModel.Admin && (\n// //                     <button onClick={handleDownloadCSV}>Download CSV file</button>\n// //                 )}\n// //             </div>\n\n// //             {user && user.roleId == RoleModel.User &&\n// //                 <div >\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showFollowed\"\n// //                             checked={showFollowed}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Followed Vacations\n// //                     </label>\n// //                     <br></br>\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showUpcoming\"\n// //                             checked={showUpcoming}\n// //                             disabled={showActive}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Upcoming Vacations\n// //                     </label>\n// //                     <br></br>\n// //                     <label>\n// //                         <input\n// //                             type=\"checkbox\"\n// //                             name=\"showActive\"\n// //                             checked={showActive}\n// //                             disabled={showUpcoming}\n// //                             onChange={handleCheckboxChange}\n// //                         />{\" \"}\n// //                         Show Active Vacations\n// //                     </label>\n// //                 </div>\n// //             }\n// //             <div className=\"pagination\">\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage - 1)}\n// //                     disabled={currentPage === 1}\n// //                 >\n// //                     Previous\n// //                 </button>\n// //                 {Array.from({ length: totalPages }, (_, i) => (\n// //                     <button\n// //                         key={i}\n// //                         onClick={() => handlePageChange(i + 1)}\n// //                         className={currentPage === i + 1 ? \"active\" : \"\"}\n// //                     >\n// //                         {i + 1}\n// //                     </button>\n// //                 ))}\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage + 1)}\n// //                     disabled={currentPage === totalPages}\n// //                 >\n// //                     Next\n// //                 </button>\n// //             </div>\n// //             <h2>Our Vacations</h2>\n// //             {currentVacations.map((vacation) => (\n// //                 <VacationCard\n// //                     key={vacation.vacationId}\n// //                     vacation={vacation}\n// //                     userId={user.userId}\n// //                     followersCount={vacation.followersCount}\n// //                     user={user}\n// //                     onDelete={handleDeleteVacation}\n// //                     onUpdateVacations={handleUpdateVacations}\n// //                 />\n\n// //             ))}\n// //             <div className=\"pagination\">\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage - 1)}\n// //                     disabled={currentPage === 1}\n// //                 >\n// //                     Previous\n// //                 </button>\n// //                 {Array.from({ length: totalPages }, (_, i) => (\n// //                     <button\n// //                         key={i}\n// //                         onClick={() => handlePageChange(i + 1)}\n// //                         className={currentPage === i + 1 ? \"active\" : \"\"}\n// //                     >\n// //                         {i + 1}\n// //                     </button>\n// //                 ))}\n// //                 <button\n// //                     onClick={() => handlePageChange(currentPage + 1)}\n// //                     disabled={currentPage === totalPages}\n// //                 >\n// //                     Next\n// //                 </button>\n// //             </div>\n// //         </div>\n// //     );\n// // }\n\n// // export default ListVacation;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import { NavLink, useNavigate } from \"react-router-dom\";\n// import UserModel from \"../../../Models/UserModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import VacationCard from \"../VacationCard/VacationCard\";\n// import \"./ListVacation.css\";\n// import RoleModel from \"../../../Models/RoleModel\";\n\n// function ListVacation(): JSX.Element {\n//     const navigate = useNavigate();\n//     const [frontendVacations, setFrontendVacations] = useState<VacationModel[]>([]);\n//     const [currentPage, setCurrentPage] = useState<number>(1);\n//     const vacationsPerPage = 9;\n//     const [user, setUser] = useState<UserModel>();\n//     const [showFollowed, setShowFollowed] = useState<boolean>(false);\n//     const [showUpcoming, setShowUpcoming] = useState<boolean>(false);\n//     const [showActive, setShowActive] = useState<boolean>(false);\n//     const [vacationDeleted, setVacationDeleted] = useState<boolean>(false);\n\n//     const [filteredVacations, setFilteredVacations] = useState<VacationModel[]>([]);\n\n//     const handleUpdateVacations = (vacationId: number, followed: boolean) => {\n//         // Update the frontendVacations state\n//         setFrontendVacations((prevVacations) =>\n//             prevVacations.map((vacation) =>\n//                 vacation.vacationId === vacationId\n//                     ? { ...vacation, isFollowing: followed }\n//                     : vacation\n//             )\n//         );\n//     };\n\n//     useEffect(() => {\n//         // Check if the user is logged in\n//         const token = authStore.getState().token;\n\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         const loggedUser = authStore.getState().user;\n//         setUser(loggedUser);\n\n//         vacationsService\n//             .getFollowedVacations(loggedUser?.userId)\n//             .then((backendVacations) => {\n//                 backendVacations.sort(\n//                     (a, b) =>\n//                         new Date(a.vacationStartDate).getTime() -\n//                         new Date(b.vacationStartDate).getTime()\n//                 );\n//                 setFrontendVacations(backendVacations);\n//                 setFilteredVacations(backendVacations);\n//             })\n//             .catch((err) => notifyService.error(err));\n//     }, [vacationDeleted]);\n\n//     function convertToCSV(data: VacationModel[]): string {\n//         const header = \"Followers,Destination\\n\";\n//         const csvData = data\n//             .map((item) => `${item.followersCount},${item.vacationDestination}`)\n//             .join(\"\\n\");\n//         return header + csvData;\n//     }\n\n//     const handlePageChange = (newPage: number) => {\n//         setCurrentPage(newPage);\n//     };\n\n//     const totalPages = Math.ceil(filteredVacations.length / vacationsPerPage);\n//     const indexOfLastVacation = currentPage * vacationsPerPage;\n//     const indexOfFirstVacation = indexOfLastVacation - vacationsPerPage;\n\n//     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const { name, checked } = e.target;\n\n//         let newShowFollowed = showFollowed;\n//         let newShowUpcoming = showUpcoming;\n//         let newShowActive = showActive;\n\n//         if (name === \"showFollowed\") {\n//             newShowFollowed = checked;\n//         } else if (name === \"showUpcoming\") {\n//             newShowUpcoming = checked;\n//         } else if (name === \"showActive\") {\n//             newShowActive = checked;\n//         }\n\n//         const currentDate = new Date();\n//         const filteredVacationsByCheckbox = frontendVacations.filter((vacation) => {\n//             const isFollowed = newShowFollowed;\n//             const isUpcoming = newShowUpcoming;\n//             const isActive = newShowActive;\n//             const vacationStartDate = new Date(vacation.vacationStartDate);\n//             const vacationEndDate = new Date(vacation.vacationEndDate);\n\n//             let meetsFilterConditions = true;\n//             if (isFollowed) {\n//                 meetsFilterConditions = meetsFilterConditions && vacation.isFollowing;\n//             }\n//             if (isUpcoming) {\n//                 meetsFilterConditions = meetsFilterConditions && vacationStartDate > currentDate;\n//             }\n//             if (isActive) {\n//                 meetsFilterConditions =\n//                     meetsFilterConditions &&\n//                     vacationStartDate <= currentDate &&\n//                     vacationEndDate >= currentDate;\n//             }\n//             return meetsFilterConditions;\n//         });\n\n//         setShowFollowed(newShowFollowed);\n//         setShowUpcoming(newShowUpcoming);\n//         setShowActive(newShowActive);\n//         setFilteredVacations(filteredVacationsByCheckbox);\n//         setCurrentPage(1);\n//     };\n\n//     const currentVacations = filteredVacations.slice(\n//         indexOfFirstVacation,\n//         indexOfLastVacation\n//     );\n\n//     const handleDeleteVacation = async (vacationId: number) => {\n//         try {\n//             const confirmed = window.confirm(\"Are you sure you want to delete this vacation?\");\n\n//             if (!confirmed) {\n//                 return;\n//             }\n\n//             await vacationsService.deleteVacation(vacationId);\n\n//             setFrontendVacations((prevVacations) =>\n//                 prevVacations.filter((vacation) => vacation.vacationId !== vacationId)\n//             );\n\n//             notifyService.success(\"The vacation has been successfully deleted\");\n\n//             setVacationDeleted((prevValue) => !prevValue);\n\n//         } catch (error) {\n//             console.error(\"Error deleting vacation:\", error);\n//         }\n//     };\n\n//     function handleDownloadCSV() {\n//         const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');\n//         const filename = `vacations_${timestamp}.csv`;\n//         const csvData = convertToCSV(filteredVacations);\n//         const blob = new Blob([csvData], { type: \"text/csv\" });\n//         const url = window.URL.createObjectURL(blob);\n//         const a = document.createElement(\"a\");\n//         a.href = url;\n//         a.download = filename;\n\n//         a.click();\n//         window.URL.revokeObjectURL(url);\n//     }\n\n//     return (\n//         <div className=\"ListVacation\">\n//             <header>\n//                 <nav>\n//                     <ul>\n//                         <li>\n//                             <NavLink to=\"/vacations/add\">Add Vacation</NavLink>\n//                         </li>\n//                         <li>\n//                             <NavLink to=\"/vacations/report\">Vacation Report</NavLink>\n//                         </li>\n//                     </ul>\n//                 </nav>\n//                 {user && user.roleId === RoleModel.Admin && (\n//                     <button onClick={handleDownloadCSV} className=\"download-csv-button\">\n//                         Download CSV\n//                     </button>\n//                 )}\n//             </header>\n//             <section className=\"filter-options\">\n//                 {user && user.roleId === RoleModel.User && (\n//                     <div className=\"filter-checkboxes\">\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showFollowed\"\n//                                 checked={showFollowed}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Followed Vacations\n//                         </label>\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showUpcoming\"\n//                                 checked={showUpcoming}\n//                                 disabled={showActive}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Upcoming Vacations\n//                         </label>\n//                         <label>\n//                             <input\n//                                 type=\"checkbox\"\n//                                 name=\"showActive\"\n//                                 checked={showActive}\n//                                 disabled={showUpcoming}\n//                                 onChange={handleCheckboxChange}\n//                             />\n//                             Show Active Vacations\n//                         </label>\n//                     </div>\n//                 )}\n//             </section>\n//             <section className=\"pagination\">\n//                 <button\n//                     onClick={() => handlePageChange(currentPage - 1)}\n//                     disabled={currentPage === 1}\n//                 >\n//                     Previous\n//                 </button>\n//                 {Array.from({ length: totalPages }, (_, i) => (\n//                     <button\n//                         key={i}\n//                         onClick={() => handlePageChange(i + 1)}\n//                         className={currentPage === i + 1 ? \"active\" : \"\"}\n//                     >\n//                         {i + 1}\n//                     </button>\n//                 ))}\n//                 <button\n//                     onClick={() => handlePageChange(currentPage + 1)}\n//                     disabled={currentPage === totalPages}\n//                 >\n//                     Next\n//                 </button>\n//             </section>\n//             <section className=\"vacation-list\">\n//                 <h2>Our Vacations</h2>\n//                 <div className=\"vacation-cards\">\n//                     {currentVacations.map((vacation) => (\n//                         <VacationCard\n//                             key={vacation.vacationId}\n//                             vacation={vacation}\n//                             userId={user.userId}\n//                             followersCount={vacation.followersCount}\n//                             user={user}\n//                             onDelete={handleDeleteVacation}\n//                             onUpdateVacations={handleUpdateVacations}\n//                         />\n//                     ))}\n//                 </div>\n//             </section>\n//         </div>\n//     );\n// }\n\n// export default ListVacation;\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}