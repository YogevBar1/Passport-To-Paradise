{"ast":null,"code":"var _jsxFileName = \"C:\\\\John Bryce Programing\\\\Passport To Paradise\\\\Frontend\\\\src\\\\Components\\\\VacationArea\\\\EditVacation\\\\EditVacation.tsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import RoleModel from \"../../../Models/RoleModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import \"./EditVacation.css\";\n\n// /**\n//  * The `EditVacation` component allows administrators to edit an existing vacation's details.\n//  * Administrators can modify the vacation's destination, description, start and end dates, price,\n//  * and select a new image for the vacation. The component ensures that the new vacation data\n//  * is valid and makes a PUT request to update the vacation on the server.\n//  */\n// function EditVacation(): JSX.Element {\n//     // Initialize react-hook-form\n//     const { watch } = useForm<VacationModel>();\n//     const { register, handleSubmit, setValue } = useForm<VacationModel>();\n\n//     // State for image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     // Get the navigation function\n//     const navigate = useNavigate();\n//     // Get the vacationId from the URL params\n//     const params = useParams();\n//     const vacationId = +params.vacationId;\n\n//     // UseEffect to fetch and set initial values\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n\n//         // Fetch the vacation data for editing\n//         vacationsService.getOneVacation(vacationId)\n//             .then(backendVacation => {\n//                 // Set form fields with the fetched data\n//                 setValue(\"vacationDestination\", backendVacation.vacationDestination);\n//                 setValue(\"vacationDescription\", backendVacation.vacationDescription);\n//                 setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationPrice\", backendVacation.vacationPrice);\n\n//                 // Set the image URL for preview\n//                 setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n//             })\n//             .catch(err => notifyService.error(err));\n//     }, [vacationId, setValue]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const imageFile = e.target.files?.[0];\n//         if (imageFile) {\n//             setSelectedImage(imageFile);\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     async function send(vacation: VacationModel) {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n//             vacation.vacationId = vacationId;\n\n//             // Check if a new image was selected\n//             if (selectedImage) {\n//                 vacation.image = selectedImage;\n\n//             } else {\n//                 // If no new image was selected, set the image URL to the current one\n//                 vacation.imageUrl = currentImagePreview || \"\";\n//             }\n\n//             // Send a PUT request to edit the vacation\n//             await vacationsService.editVacation(vacation);\n//             notifyService.success(\"Vacation has been edited\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     }\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n//     return (\n//         <div className=\"EditVacation\">\n//             <h2>Edit Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     //No validate on start date because we edit vacation\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={selectedStartDate}\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"50\"\n//                     max=\"9999.99\"\n//                 />\n\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange} // Add onChange to handle image selection\n//                 />\n//                 {/* Display the current image preview */}\n//                 {currentImagePreview && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Current Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Current Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() => console.log(\"Image failed to load: \" + currentImagePreview)} // Handle image loading error\n//                         />\n//                     </div>\n//                 )}\n\n//                 <button className=\"btn btn-primary\">Edit</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default EditVacation;\nimport { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n// ... other imports ...\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditVacation() {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    setValue\n  } = useForm();\n\n  // ... other code ...\n\n  useEffect(() => {\n    // ... other code ...\n\n    // Set up custom validation rule for vacation name\n    register(\"vacationDestination\", {\n      required: \"Vacation Destination is required\",\n      validate: value => {\n        if (value.trim() === \"\") {\n          return \"Vacation Destination cannot be empty\";\n        }\n        return true;\n      }\n    });\n  }, [register]);\n\n  // ... other code ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"EditVacation\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Vacation Destination:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ...register(\"vacationDestination\"),\n      required: true,\n      minLength: 2,\n      maxLength: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), error.vacationDestination && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: errors.vacationDestination.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n}\n_s(EditVacation, \"uDJfaQ9yKIPhd1k2Y5ywCMIO5kM=\", false, function () {\n  return [useForm];\n});\n_c = EditVacation;\nexport default EditVacation;\nvar _c;\n$RefreshReg$(_c, \"EditVacation\");","map":{"version":3,"names":["useEffect","useForm","jsxDEV","_jsxDEV","EditVacation","_s","register","handleSubmit","setValue","required","validate","value","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","minLength","maxLength","error","vacationDestination","errors","message","_c","$RefreshReg$"],"sources":["C:/John Bryce Programing/Passport To Paradise/Frontend/src/Components/VacationArea/EditVacation/EditVacation.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import RoleModel from \"../../../Models/RoleModel\";\n// import VacationModel from \"../../../Models/VacationModel\";\n// import { authStore } from \"../../../Redux/AuthState\";\n// import notifyService from \"../../../Services/NotifyService\";\n// import vacationsService from \"../../../Services/VacationsService\";\n// import \"./EditVacation.css\";\n\n\n// /**\n//  * The `EditVacation` component allows administrators to edit an existing vacation's details.\n//  * Administrators can modify the vacation's destination, description, start and end dates, price,\n//  * and select a new image for the vacation. The component ensures that the new vacation data\n//  * is valid and makes a PUT request to update the vacation on the server.\n//  */\n// function EditVacation(): JSX.Element {\n//     // Initialize react-hook-form\n//     const { watch } = useForm<VacationModel>();\n//     const { register, handleSubmit, setValue } = useForm<VacationModel>();\n\n//     // State for image preview\n//     const [currentImagePreview, setCurrentImagePreview] = useState<string | undefined>(\"\");\n\n//     // State to store the selected image file\n//     const [selectedImage, setSelectedImage] = useState<File | null>(null);\n\n//     // Get the navigation function\n//     const navigate = useNavigate();\n//     // Get the vacationId from the URL params\n//     const params = useParams();\n//     const vacationId = +params.vacationId;\n\n//     // UseEffect to fetch and set initial values\n//     useEffect(() => {\n//         // Check if the user login:\n//         const token = authStore.getState().token;\n//         if (!token) {\n//             notifyService.error(\"Please Login\");\n//             navigate(\"/login\");\n//             return;\n//         }\n\n//         // Check if the user admin:\n//         const role = authStore.getState().user.roleId;\n//         if (role !== RoleModel.Admin) {\n//             notifyService.error(\"You don`t have access to this page\");\n//             navigate(\"/home\");\n//         }\n\n//         // Fetch the vacation data for editing\n//         vacationsService.getOneVacation(vacationId)\n//             .then(backendVacation => {\n//                 // Set form fields with the fetched data\n//                 setValue(\"vacationDestination\", backendVacation.vacationDestination);\n//                 setValue(\"vacationDescription\", backendVacation.vacationDescription);\n//                 setValue(\"vacationStartDate\", backendVacation.vacationStartDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationEndDate\", backendVacation.vacationEndDate.toString().split(\"T\")[0]);\n//                 setValue(\"vacationPrice\", backendVacation.vacationPrice);\n\n//                 // Set the image URL for preview\n//                 setCurrentImagePreview(\"http://localhost:4000/api/vacations/\" + `${backendVacation.imageUrl}`);\n//             })\n//             .catch(err => notifyService.error(err));\n//     }, [vacationId, setValue]);\n\n//     // Function to handle image selection\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n//         const imageFile = e.target.files?.[0];\n//         if (imageFile) {\n//             setSelectedImage(imageFile);\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 setCurrentImagePreview(reader.result as string);\n//             };\n//             reader.readAsDataURL(imageFile);\n//         }\n//     };\n\n//     async function send(vacation: VacationModel) {\n//         try {\n//             // Check if the end date is before the start date\n//             if (vacation.vacationStartDate > vacation.vacationEndDate) {\n//                 notifyService.error(\"Please select an end date that comes after the start date of the vacation.\");\n//                 return;\n//             }\n//             vacation.vacationId = vacationId;\n\n//             // Check if a new image was selected\n//             if (selectedImage) {\n//                 vacation.image = selectedImage;\n\n//             } else {\n//                 // If no new image was selected, set the image URL to the current one\n//                 vacation.imageUrl = currentImagePreview || \"\";\n//             }\n\n//             // Send a PUT request to edit the vacation\n//             await vacationsService.editVacation(vacation);\n//             notifyService.success(\"Vacation has been edited\");\n//             // Navigate back to the home page\n//             navigate(\"/vacations\");\n//         } catch (err: any) {\n//             // Handle any errors that occur during the process\n//             notifyService.error(err);\n//         }\n//     }\n\n//     // Get the selected start date\n//     const selectedStartDate = watch(\"vacationStartDate\");\n//     return (\n//         <div className=\"EditVacation\">\n//             <h2>Edit Vacation:</h2>\n//             <form onSubmit={handleSubmit(send)}>\n//                 <label>Vacation Destination:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDestination\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={50}\n//                 />\n//                 <label>Vacation Description:</label>\n//                 <input\n//                     type=\"text\"\n//                     {...register(\"vacationDescription\")}\n//                     required\n//                     minLength={2}\n//                     maxLength={250}\n//                 />\n//                 <label>Vacation Start Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationStartDate\")}\n//                     //No validate on start date because we edit vacation\n//                     required\n//                 />\n//                 <label>Vacation End Date: </label>\n//                 <input\n//                     type=\"date\"\n//                     {...register(\"vacationEndDate\")}\n//                     // Minimum end date should be the selected start date or today's date\n//                     min={selectedStartDate}\n//                     required\n//                 />\n//                 <label>Price: </label>\n//                 <input\n//                     type=\"number\"\n//                     step=\"0.01\"\n//                     {...register(\"vacationPrice\")}\n//                     required\n//                     min=\"50\"\n//                     max=\"9999.99\"\n//                 />\n\n//                 <label>Image: </label>\n//                 <input\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     {...register(\"image\")}\n//                     onChange={handleImageChange} // Add onChange to handle image selection\n//                 />\n//                 {/* Display the current image preview */}\n//                 {currentImagePreview && (\n//                     <div className=\"current-image-preview\">\n//                         <p>Current Image Preview:</p>\n//                         <img\n//                             src={currentImagePreview}\n//                             alt=\"Current Vacation\"\n//                             onLoad={() => console.log(\"Image loaded successfully\")}\n//                             onError={() => console.log(\"Image failed to load: \" + currentImagePreview)} // Handle image loading error\n//                         />\n//                     </div>\n//                 )}\n\n//                 <button className=\"btn btn-primary\">Edit</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default EditVacation;\nimport { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n// ... other imports ...\n\nfunction EditVacation(): JSX.Element {\n    const { register, handleSubmit, setValue } = useForm<VacationModel>();\n\n    // ... other code ...\n\n    useEffect(() => {\n        // ... other code ...\n\n        // Set up custom validation rule for vacation name\n        register(\"vacationDestination\", {\n            required: \"Vacation Destination is required\",\n            validate: (value) => {\n                if (value.trim() === \"\") {\n                    return \"Vacation Destination cannot be empty\";\n                }\n                return true;\n            },\n        });\n    }, [register]);\n\n    // ... other code ...\n\n    return (\n        <div className=\"EditVacation\">\n            {/* ... other code ... */}\n            <label>Vacation Destination:</label>\n            <input\n                type=\"text\"\n                {...register(\"vacationDestination\")}\n                required\n                minLength={2}\n                maxLength={50}\n            />\n            {error.vacationDestination && (\n                <span className=\"error\">{errors.vacationDestination.message}</span>\n            )}\n            {/* ... other code ... */}\n        </div>\n    );\n}\n\nexport default EditVacation;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,YAAYA,CAAA,EAAgB;EAAAC,EAAA;EACjC,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAS,CAAC,GAAGP,OAAO,EAAiB;;EAErE;;EAEAD,SAAS,CAAC,MAAM;IACZ;;IAEA;IACAM,QAAQ,CAAC,qBAAqB,EAAE;MAC5BG,QAAQ,EAAE,kCAAkC;MAC5CC,QAAQ,EAAGC,KAAK,IAAK;QACjB,IAAIA,KAAK,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;UACrB,OAAO,sCAAsC;QACjD;QACA,OAAO,IAAI;MACf;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;;EAEd;;EAEA,oBACIH,OAAA;IAAKU,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAEzBX,OAAA;MAAAW,QAAA,EAAO;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,eACpCf,OAAA;MACIgB,IAAI,EAAC,MAAM;MAAA,GACPb,QAAQ,CAAC,qBAAqB,CAAC;MACnCG,QAAQ;MACRW,SAAS,EAAE,CAAE;MACbC,SAAS,EAAE;IAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChB,EACDI,KAAK,CAACC,mBAAmB,iBACtBpB,OAAA;MAAMU,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEU,MAAM,CAACD,mBAAmB,CAACE;IAAO;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEC;AAEd;AAACb,EAAA,CAvCQD,YAAY;EAAA,QAC4BH,OAAO;AAAA;AAAAyB,EAAA,GAD/CtB,YAAY;AAyCrB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}